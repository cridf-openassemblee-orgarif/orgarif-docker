{"version":3,"sources":["component/base-component/SharedHeightContainerContext.tsx","utils/Pipe.ts","component/base-component/SelectInput.tsx","component/NombreRepresentantsComponent.tsx","component/base-component/SimpleForm.tsx","component/base-component/TextInput.tsx","component/edit/DragAndDropContainer.tsx","component/edit/AddInstanceComponent.tsx","simple-fr.ts","component/base-component/LocalDateInput.tsx","component/edit/CreateDeliberationAndAddLienComponent.tsx","component/edit/AddLienDeliberationComponent.tsx","component/edit/EditLienDeliberationsListComponent.tsx","component/base-component/SharedHeightContainer.tsx","component/edit/AddRepresentantComponent.tsx","component/EluComponent.tsx","component/base-component/DeleteButton.tsx","component/edit/DeleteRepresentantButton.tsx","component/edit/RepresentantsListComponent.tsx","component/edit/EditRepresentantsListComponent.tsx","component/edit/DeleteInstanceButton.tsx","component/edit/InstancesListComponent.tsx","component/edit/EditOrganismeComponent.tsx","view/ListOrganismesView.tsx","component/base-component/PasswordInput.tsx","form/LoginForm.tsx","component/OrganismeComponent.tsx","form/RegisterForm.tsx","view/RegisterView.tsx","routing/routes.ts","view/EditOrganismeView.tsx","view/ListOrganismesBySecteurView.tsx","view/LoginView.tsx","view/OrganismeView.tsx","view/RootView.tsx","routing/ApplicationHistory.ts","services/CommandService.ts","services/CsrfTokenService.ts","services/HttpService.ts","services/NotificationService.ts","services/QueryService.ts","ApplicationContext.ts","styles/vars.ts","styles/common-styles.ts","common-classes.tsx","container/Root.tsx","view/NotFoundView.tsx","routing/ApplicationRouter.tsx","index.ts","utils.ts","state/state.ts","routing/RouteLink.tsx","application-bootstrap.tsx","form/LogoutForm.tsx","container/Menu.tsx","container/MainContainer.tsx","errors.ts","constants.ts","utils/nominal-class.ts"],"names":["HeightContext","React","getHeights","groupId","componentId","pushHeight","height","SharedHeightContainerContext","props","useState","heightsDict","setHeightsDict","Provider","value","groupeHeights","get","groupHeight","dictValues","sort","compareByNumber","i","componentHeight","groupHeights","set","dict","children","pipe","Pipe","t","map","lambda","unwrap","this","useStyles","makeStyles","theme","createStyles","formControl","margin","spacing","selectEmpty","marginTop","SelectInput","inputId","clientUid","classes","css","label","FormControl","variant","className","fullWidth","size","Select","labelId","stringifyNominalString","id","onChange","options","o","NombreRepresentantsComponent","nombreRepresentants","nombreSuppleants","SimpleForm","ref","forwardRef","onSubmit","event","preventDefault","stopPropagation","form","currentTarget","dto","Array","from","elements","forEach","e","HTMLInputElement","type","name","TextInput","initialValue","TextField","autoFocus","noInstanceId","representantListId","organismeId","instanceId","representantOrSuppleant","instanciateNominalString","DragAndDropContainer","onDragEnd","result","Error","assertUnreachable","representantId","draggableId","destination","sourceId","source","droppableId","destinationId","index","sourceIndex","resultIndex","newLists","representantsLists","list","sourceList","getValue","movedItem","splice","destinationList","setRepresentantsLists","parts","split","length","Errors","_6f643a2a","undefined","extract","appContext","commandService","moveRepresentantCommand","toOrganismeId","toInstanceId","toPosition","toRepresentantOrSuppleant","then","AddInstanceComponent","formRef","useRef","nomInstance","nom","addInstanceCommand","r","current","reset","instance","infos","lienDeliberations","representants","suppleants","newInstances","instances","setInstances","newRepresentantsLists","formatLocaleDate","_41dcf9d3","LocalDateInput","mask","CreateDeliberationAndAddLienComponent","dialogLoading","setDialogLoading","displayError","setDisplayError","Dialog","open","display","onClose","close","deliberationDate","_ff7e63f5","stringToLocalDate","createDeliberationAndAddLienCommand","libelle","deliberation","deliberationId","addDeliberation","lienDeliberationId","catch","error","message","DialogTitle","DialogContent","colors","errorRed","DialogActions","Button","onClick","color","disabled","CircularProgress","AddLienDeliberationComponent","setValue","inputValue","setInputValue","displayDialog","setDisplayDialog","dialogLibelle","setDialogLibelle","alreadySet","setAlreadySet","loading","setLoading","deliberations","setDeliberations","lienDeliberation","newDeliberations","compareByLocalDate","d","setLienDeliberations","openDialog","defer","Autocomplete","onInputChange","SharedConstants","deliberationSearchLengthLimit","queryService","searchDeliberationQuery","searchToken","existingLiens","l","results","filter","includes","libelles","newValue","_82c7652b","addLienDeliberationCommand","getOptionLabel","option","selectOnFocus","clearOnBlur","handleHomeEndKeys","freeSolo","style","width","renderInput","params","white","renderOption","EditLienDeliberationsListComponent","ContainerWrapped","heights","useEffect","clientHeight","SharedHeightContainer","Consumer","AddRepresentantComponent","elus","useRecoilValue","state","prenom","clearOnEscape","eluId","addRepresentantCommand","representant","listId","newRepresentants","v","EluComponent","elusById","root","padding","fontSize","textAlign","background","DeleteButton","setState","iconSpanStyle","iconStyle","Clear","ButtonGroup","setTimeout","KeyboardBackspace","onDelete","DeleteRepresentantButton","deleteRepresentantCommand","RepresentantsListComponent","provided","snapshot","innerRef","droppableProps","isDraggingOver","lightblue","clearGrey","emptyListLabel","providedDraggable","snapshotDraggable","draggableProps","dragHandleProps","isDragging","dragableMoving","placeholder","EditRepresentantsListComponent","DeleteInstanceButton","deleteInstanceCommand","deleteFromDict","InstancesListComponent","direction","clearGrey2","partageRepresentants","categories","EditCategoryComponent","categoryList","unshift","toLowerCase","currentId","target","EditOrganismeComponent","organisme","setPartageRepresentants","setMutable","natureJuridiques","categoryById","natureJuridiquesById","natureJuridiqueId","updateOrganismeNatureJuridiqueCommand","secteurs","secteursById","secteurId","updateOrganismeSecteurCommand","typeStructures","typeStructuresById","typeStructureId","updateOrganismeTypeStructureCommand","FormControlLabel","control","Checkbox","checked","updateOrganismePartageRepresentantsCommand","PasswordInput","showPassword","setShowPassword","InputLabel","htmlFor","OutlinedInput","endAdornment","InputAdornment","position","IconButton","aria-label","onMouseDown","edge","Visibility","VisibilityOff","LoginForm","password","setPassword","login","Separator","grey","NombreRepresentants","RepresentantsComponent","DeliberationsComponent","InstanceComponent","OrganismeComponent","RegisterForm","mailIsAlreadyTaken","setMailIsAlreadyTaken","mail","isLoginAlreadyTakenQuery","alreadyTaken","routes","EditOrganismeRoute","path","component","setOrganisme","getOrganismeQuery","routeParams","MainContainer","RouteLink","route","ArrowBackIos","authenticationLevel","ListOrganismesBySecteurRoute","organismes","setOrganismes","secteurById","secteur","listOrganismesBySecteurQuery","createOrganismeCommand","applicationHistory","goTo","ListOrganismesRoute","listOrganismesQuery","LoginRoute","useRecoilState","userInfos","setUserInfos","loginResult","setLoginResult","data","loginCommand","userinfos","_198c103e","csrfTokenService","refreshToken","applicationBootstrapData","env","OrganismeRoute","RegisterRoute","registerResult","setRegisterResult","registerInput","registerCommand","_db434940","RootRoute","s","ApplicationHistory","_browserHistory","history","push","buildPath","replace","Object","keys","k","param","indexOf","CommandService","command","commandName","httpService","post","objectType","body","CsrfTokenService","header","inputName","token","getCookie","_166ac42d","displayErrorMessage","HttpService","credentials","url","getParams","fetchAndDeserialize","bodyObject","JSON","stringify","requestType","bodyAsString","method","headers","Accept","finalUrl","encodeURIComponent","fetch","response","ok","text","status","parse","Promise","reject","NotificationService","notifications","displayNotification","toast","QueryService","query","queryName","csrfTokenServiceInstance","httpServiceInstance","notificationServiceInstance","notificationService","applicationHistoryInstance","queryServiceInstance","commandServiceInstance","fonts","font","dragHandlers","errorBackground","popupGlasspanel","globalStyles","cleanScrollBar","Root","setHeight","handleResize","window","innerHeight","addEventListener","removeEventListener","useWindowHeight","NotFoundView","ApplicationRouter","browserHistory","values","exact","render","routerProps","match","x","uniqueIdIndex","cookieName","ca","document","cookie","c","charAt","substring","o1","o2","compareByString","localeCompare","action","atom","key","default","selector","pairsToDict","n","organismeCategories","Styled","forwardCss","styled","Link","to","global","log","logged","console","muiTheme","createMuiTheme","typography","ReactDOM","styles","injectFirst","getElementById","LogoutForm","logoutForm","isLoggingOut","logout","submit","PureComponent","Menu","_4b60ab70","bootstrapData","newDict","pairs","pair"],"mappings":"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","file":"static/js/main.4f23da2c.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { PropsWithChildren, useState } from 'react';\nimport { ClientUid } from '../../domain/client-ids';\nimport { compareByNumber } from '../../utils';\nimport { dict, Dict, dictValues, get, set } from '../../utils/nominal-class';\n\nexport interface SharedHeightContextInterface {\n  getHeights: (\n    groupId: ClientUid,\n    componentId: ClientUid\n  ) => {\n    groupHeight?: number;\n    componentHeight?: number;\n  };\n  pushHeight: (\n    groupId: ClientUid,\n    componentId: ClientUid,\n    height: number\n  ) => void;\n}\n\nexport const HeightContext = React.createContext<SharedHeightContextInterface>({\n  getHeights: (groupId: ClientUid, componentId: ClientUid) => ({}),\n  pushHeight: (groupId: ClientUid, componentId: ClientUid, height: number) => {}\n});\n\nexport const SharedHeightContainerContext = (props: PropsWithChildren<{}>) => {\n  const [heightsDict, setHeightsDict] = useState(\n    {} as Dict<ClientUid, Dict<ClientUid, number>>\n  );\n  const getHeights = (groupId: ClientUid, componentId: ClientUid) => {\n    const groupeHeights = get(heightsDict, groupId);\n    if (!groupeHeights) {\n      return {};\n    }\n    return {\n      groupHeight: dictValues(groupeHeights).sort(compareByNumber(i => -i))[0],\n      componentHeight: get(groupeHeights, componentId)\n    };\n  };\n  const pushHeight = (\n    groupId: ClientUid,\n    componentId: ClientUid,\n    height: number\n  ) => {\n    const groupHeights = set(\n      get(heightsDict, groupId) ?? dict<ClientUid, number>(),\n      componentId,\n      height\n    );\n    setHeightsDict(set(heightsDict, groupId, groupHeights));\n  };\n  return (\n    <HeightContext.Provider value={{ getHeights, pushHeight }}>\n      {props.children}\n    </HeightContext.Provider>\n  );\n};\n","export const pipe = <T>(value: T) => new Pipe(value);\n\nexport class Pipe<T> {\n  t: T;\n\n  constructor(t: T) {\n    this.t = t;\n  }\n\n  // map = <U>(lambda: (t: T, ...l: any) => U, ...p: any): Pipe<U> => new Pipe(lambda(this.t, p));\n  // .map(replaceAll, '<mj-fragment>', '')\n  map = <U>(lambda: (t: T) => U): Pipe<U> => new Pipe(lambda(this.t));\n\n  unwrap = () => this.t;\n}\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { createStyles, FormControl, Select, Theme } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem/MenuItem';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport * as React from 'react';\nimport { clientUid } from '../../utils';\nimport { stringifyNominalString } from '../../utils/nominal-class';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1)\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2)\n    }\n  })\n);\n\nexport interface SelectOption {\n  value: any;\n  label: string;\n}\n\nexport const SelectInput = (props: {\n  label: string;\n  value: any | undefined;\n  options: SelectOption[];\n  onChange: (event: React.ChangeEvent<{ value: unknown }>) => void;\n}) => {\n  const inputId = clientUid();\n  const classes = useStyles();\n  return (\n    <div\n      css={css`\n        display: flex;\n      `}\n    >\n      <div\n        css={css`\n          flex: 25%;\n          font-size: 1rem;\n          text-align: right;\n          padding: 19px 10px 0 0;\n        `}\n      >\n        {props.label}\n      </div>\n      <FormControl\n        variant=\"outlined\"\n        className={classes.formControl}\n        fullWidth={true}\n        size={'small'}\n        css={css`\n          flex: 75%;\n        `}\n      >\n        <Select\n          labelId={stringifyNominalString(inputId)}\n          id={stringifyNominalString(inputId)}\n          value={props.value}\n          onChange={props.onChange}\n        >\n          {props.options.map((o, i) => (\n            <MenuItem key={i} value={o.value}>\n              {o.label}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\n\nexport const NombreRepresentantsComponent = (props: {\n  nombreRepresentants?: number;\n  nombreSuppleants?: number;\n}) => (\n  <div>\n    {props.nombreRepresentants} représentants, {props.nombreSuppleants}{' '}\n    suppléants\n  </div>\n);\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { FormEvent, PropsWithChildren, Ref } from 'react';\n\nexport const SimpleForm = (\n  props: PropsWithChildren<{\n    forwardRef?: Ref<HTMLFormElement>;\n    onSubmit: (data: any) => void;\n  }>\n) => {\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    const form = event.currentTarget as HTMLFormElement;\n    const dto: any = {};\n    Array.from(form.elements).forEach(e => {\n      if (e instanceof HTMLInputElement && e.type === 'text') {\n        dto[e.name] = e.value;\n      }\n    });\n    props.onSubmit(dto);\n  };\n\n  return (\n    <form ref={props.forwardRef} onSubmit={onSubmit}>\n      {props.children}\n    </form>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport TextField from '@material-ui/core/TextField';\nimport * as React from 'react';\nimport { ChangeEvent, useState } from 'react';\n\nexport const TextInput = (props: {\n  name: string;\n  label: string;\n  initialValue?: string;\n  autoFocus?: boolean;\n  type?: React.InputHTMLAttributes<unknown>['type'];\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void;\n}) => {\n  const [value] = useState(props.initialValue);\n  return (\n    <TextField\n      name={props.name}\n      label={props.label}\n      variant=\"outlined\"\n      value={value}\n      fullWidth={true}\n      autoFocus={props.autoFocus}\n      size={'small'}\n      type={props.type}\n      onChange={props.onChange}\n    />\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { PropsWithChildren } from 'react';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { appContext } from '../../ApplicationContext';\nimport { RepresentantListId } from '../../domain/client-ids';\nimport { InstanceId, OrganismeId, RepresentantId } from '../../domain/ids';\nimport {\n  FullOrganisme,\n  Representant,\n  RepresentantOrSuppleant\n} from '../../domain/organisme';\nimport { Errors } from '../../errors';\nimport { assertUnreachable } from '../../utils';\nimport {\n  Dict,\n  getValue,\n  instanciateNominalString,\n  set,\n  stringifyNominalString\n} from '../../utils/nominal-class';\nimport { pipe } from '../../utils/Pipe';\n\nconst noInstanceId = 'no-instance';\n\nexport type DragAndDropItem = 'instance' | 'representant';\n\nexport const representantListId = (\n  organismeId: OrganismeId,\n  instanceId: InstanceId | undefined,\n  representantOrSuppleant: RepresentantOrSuppleant\n) =>\n  instanciateNominalString<RepresentantListId>(\n    `${stringifyNominalString(organismeId)}.${\n      instanceId ? stringifyNominalString(instanceId) : noInstanceId\n    }.${representantOrSuppleant}`\n  );\n\nexport const extract = (\n  representantListId: RepresentantListId\n): [OrganismeId, InstanceId | undefined, RepresentantOrSuppleant] => {\n  const parts = stringifyNominalString(representantListId).split('.');\n  if (parts.length !== 3) {\n    throw Errors._6f643a2a();\n  }\n  return [\n    instanciateNominalString<OrganismeId>(parts[0]),\n    parts[1] !== noInstanceId\n      ? instanciateNominalString<InstanceId>(parts[1])\n      : undefined,\n    parts[2] as RepresentantOrSuppleant\n  ];\n};\n\nexport const DragAndDropContainer = (\n  props: PropsWithChildren<{\n    organisme: FullOrganisme;\n    representantsLists: Dict<RepresentantListId, Representant[]>;\n    setRepresentantsLists: (\n      lists: Dict<RepresentantListId, Representant[]>\n    ) => void;\n  }>\n) => {\n  const onDragEnd = (result: DropResult) => {\n    const type = result.type as DragAndDropItem;\n    switch (type) {\n      case 'instance':\n        throw Error('Not implemented yet');\n      case 'representant':\n        break;\n      default:\n        assertUnreachable(type);\n    }\n    const representantId = instanciateNominalString<RepresentantId>(\n      result.draggableId\n    );\n    if (!result.destination) {\n      return;\n    }\n    const sourceId = instanciateNominalString<RepresentantListId>(\n      result.source.droppableId\n    );\n    const destinationId = instanciateNominalString<RepresentantListId>(\n      result.destination.droppableId\n    );\n    if (\n      sourceId === destinationId &&\n      result.source.index === result.destination.index\n    ) {\n      return;\n    }\n\n    const sourceIndex = result.source.index;\n    const resultIndex = result.destination.index;\n    const newLists = pipe(props.representantsLists)\n      .map(list => {\n        const sourceList = [...getValue(list, sourceId)];\n        const movedItem = sourceList.splice(sourceIndex, 1)[0];\n        return { list: set(list, sourceId, sourceList), movedItem };\n      })\n      .map(({ list, movedItem }) => {\n        const destinationList = [...getValue(list, destinationId)];\n        destinationList.splice(resultIndex, 0, movedItem);\n        return set(list, destinationId, destinationList);\n      })\n      .unwrap();\n    props.setRepresentantsLists(newLists);\n\n    const [organismeId, instanceId, representantOrSuppleant] = extract(\n      destinationId\n    );\n\n    appContext\n      .commandService()\n      .moveRepresentantCommand({\n        id: representantId,\n        toOrganismeId: organismeId,\n        toInstanceId: instanceId,\n        toPosition: result.destination.index,\n        toRepresentantOrSuppleant: representantOrSuppleant\n      })\n      .then(() => {});\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>{props.children}</DragDropContext>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { useRef } from 'react';\nimport { appContext } from '../../ApplicationContext';\nimport { RepresentantListId } from '../../domain/client-ids';\nimport { OrganismeId } from '../../domain/ids';\nimport { FullInstance, Representant } from '../../domain/organisme';\nimport { Dict, set } from '../../utils/nominal-class';\nimport { pipe } from '../../utils/Pipe';\nimport { SimpleForm } from '../base-component/SimpleForm';\nimport { TextInput } from '../base-component/TextInput';\nimport { representantListId } from './DragAndDropContainer';\n\nexport const AddInstanceComponent = (props: {\n  organismeId: OrganismeId;\n  instances: FullInstance[];\n  setInstances: (instances: FullInstance[]) => void;\n  representantsLists: Dict<RepresentantListId, Representant[]>;\n  setRepresentantsLists: (\n    lists: Dict<RepresentantListId, Representant[]>\n  ) => void;\n}) => {\n  const formRef = useRef<HTMLFormElement>(null);\n  const addInstance = (nomInstance: string) => {\n    appContext\n      .commandService()\n      .addInstanceCommand({ nomInstance, organismeId: props.organismeId })\n      .then(r => {\n        formRef.current!.reset();\n        const instance: FullInstance = {\n          infos: {\n            id: r.id,\n            nom: nomInstance,\n            organismeId: props.organismeId\n          },\n          lienDeliberations: [],\n          representants: [],\n          suppleants: []\n        };\n        const newInstances = [...props.instances, instance];\n        props.setInstances(newInstances);\n        const newRepresentantsLists = pipe(props.representantsLists)\n          .map(list =>\n            set(\n              list,\n              representantListId(props.organismeId, r.id, 'representant'),\n              []\n            )\n          )\n          .map(list =>\n            set(\n              list,\n              representantListId(props.organismeId, r.id, 'suppleant'),\n              []\n            )\n          )\n          .unwrap();\n        props.setRepresentantsLists(newRepresentantsLists);\n      });\n  };\n  return (\n    <SimpleForm forwardRef={formRef} onSubmit={e => addInstance(e.nom)}>\n      <TextInput name=\"nom\" label=\"Nouvelle instance\" />\n    </SimpleForm>\n  );\n};\n","import { LocalDate } from './domain/time';\nimport { Errors } from './errors';\nimport { stringifyNominalString } from './utils/nominal-class';\n\nexport const formatLocaleDate = (value: LocalDate) => {\n  const parts = stringifyNominalString(value).split('-');\n  if (parts.length !== 3) {\n    throw Errors._41dcf9d3();\n  }\n  return `${parts[2]}/${parts[1]}/${parts[0]}`;\n};\n","/** @jsxImportSource @emotion/react */\nimport TextField from '@material-ui/core/TextField';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport InputMask from 'react-input-mask';\nimport { LocalDate } from '../../domain/time';\nimport { Errors } from '../../errors';\nimport { formatLocaleDate } from '../../simple-fr';\nimport { instanciateNominalString } from '../../utils/nominal-class';\n\nexport const stringToLocalDate = (value: string): LocalDate => {\n  const parts = value.split('/');\n  if (parts.length !== 3) {\n    throw Errors._ff7e63f5();\n  }\n  return instanciateNominalString(`${parts[2]}-${parts[1]}-${parts[0]}`);\n};\n\nexport const LocalDateInput = (props: {\n  name: string;\n  label: string;\n  initialValue?: LocalDate;\n  autoFocus?: boolean;\n}) => {\n  const [value] = useState(\n    props.initialValue ? formatLocaleDate(props.initialValue) : undefined\n  );\n  return (\n    <InputMask mask=\"99/99/9999\" value={value}>\n      {() => (\n        <TextField\n          name={props.name}\n          label={props.label}\n          variant=\"outlined\"\n          value={value}\n          fullWidth={true}\n          autoFocus={props.autoFocus}\n          size={'small'}\n        />\n      )}\n    </InputMask>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, DialogTitle } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { appContext } from '../../ApplicationContext';\nimport { InstanceId, OrganismeId } from '../../domain/ids';\nimport {\n  DeliberationInfos,\n  LienDeliberationInfos\n} from '../../domain/organisme';\nimport { RequestError } from '../../services/HttpService';\nimport { colors } from '../../styles/vars';\nimport {\n  LocalDateInput,\n  stringToLocalDate\n} from '../base-component/LocalDateInput';\nimport { SimpleForm } from '../base-component/SimpleForm';\nimport { TextInput } from '../base-component/TextInput';\n\ninterface DialogFormDto {\n  libelle: string;\n  deliberationDate: string;\n}\n\nexport const CreateDeliberationAndAddLienComponent = (props: {\n  libelle: string;\n  display: boolean;\n  close: () => void;\n  organismeId: OrganismeId;\n  instanceId?: InstanceId;\n  addDeliberation: (lienDeliberation: LienDeliberationInfos) => void;\n}) => {\n  const [dialogLoading, setDialogLoading] = useState(false);\n  const [displayError, setDisplayError] = useState('');\n  const dialogSubmit = (dto: DialogFormDto) => {\n    const deliberationDate = stringToLocalDate(dto.deliberationDate);\n    setDialogLoading(true);\n    appContext\n      .commandService()\n      .createDeliberationAndAddLienCommand({\n        libelle: dto.libelle,\n        deliberationDate,\n        organismeId: props.organismeId,\n        instanceId: props.instanceId\n      })\n      .then(r => {\n        const deliberation: DeliberationInfos = {\n          id: r.deliberationId,\n          libelle: dto.libelle,\n          deliberationDate\n        };\n        props.addDeliberation({\n          id: r.lienDeliberationId,\n          deliberation\n        });\n        props.close();\n        setDisplayError('');\n        setDialogLoading(false);\n      })\n      .catch((e: RequestError) => {\n        setDialogLoading(false);\n        if (e.error === 'SerializationError') {\n          setDisplayError(e.message);\n        } else {\n          throw e;\n        }\n      });\n  };\n  return (\n    <Dialog open={props.display} onClose={props.close}>\n      <SimpleForm onSubmit={dialogSubmit}>\n        <DialogTitle>Ajouter nouvelle délibération</DialogTitle>\n        <DialogContent>\n          <TextInput\n            name=\"libelle\"\n            label=\"Libellé\"\n            initialValue={props.libelle}\n          />\n          <div\n            css={css`\n              padding-top: 10px;\n            `}\n          >\n            <LocalDateInput\n              label=\"Date de délibération\"\n              name=\"deliberationDate\"\n              autoFocus\n            />\n            {displayError !== '' && (\n              <div\n                css={css`\n                  color: ${colors.errorRed};\n                  font-weight: bold;\n                `}\n              >\n                {displayError}\n              </div>\n            )}\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.close} color=\"primary\">\n            Annuler\n          </Button>\n          <div>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={dialogLoading}\n            >\n              Ajouter\n            </Button>\n            {dialogLoading && (\n              <div\n                css={css`\n                  position: absolute;\n                  top: 50%;\n                  left: 50%;\n                  margin-top: -12px;\n                  margin-left: -12px;\n                `}\n              >\n                <CircularProgress size={24} />\n              </div>\n            )}\n          </div>\n        </DialogActions>\n      </SimpleForm>\n    </Dialog>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport * as React from 'react';\nimport { ChangeEvent, useState } from 'react';\nimport { appContext } from '../../ApplicationContext';\nimport { SharedConstants } from '../../constants';\nimport { DeliberationId, InstanceId, OrganismeId } from '../../domain/ids';\nimport {\n  DeliberationInfos,\n  LienDeliberationInfos\n} from '../../domain/organisme';\nimport { LocalDate } from '../../domain/time';\nimport { Errors } from '../../errors';\nimport { colors } from '../../styles/vars';\nimport { compareByLocalDate, defer } from '../../utils';\nimport { CreateDeliberationAndAddLienComponent } from './CreateDeliberationAndAddLienComponent';\n\ninterface DeliberationItem {\n  id?: DeliberationId;\n  libelle: string;\n  deliberationDate?: LocalDate;\n}\n\nexport const AddLienDeliberationComponent = (props: {\n  organismeId: OrganismeId;\n  instanceId?: InstanceId;\n  lienDeliberations: LienDeliberationInfos[];\n  setLienDeliberations: (l: LienDeliberationInfos[]) => void;\n}) => {\n  // material-ui wants null to reset correctly the input\n  const [value, setValue] = useState<DeliberationItem | null>(null);\n  const [inputValue, setInputValue] = useState('');\n  const [displayDialog, setDisplayDialog] = useState(false);\n  const [dialogLibelle, setDialogLibelle] = useState('');\n  const [alreadySet, setAlreadySet] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [deliberations, setDeliberations] = useState<DeliberationItem[]>([]);\n\n  const addDeliberation = (lienDeliberation: LienDeliberationInfos) => {\n    const newDeliberations = [...props.lienDeliberations, lienDeliberation];\n    newDeliberations.sort(\n      compareByLocalDate(d => d.deliberation.deliberationDate)\n    );\n    props.setLienDeliberations(newDeliberations);\n  };\n\n  // search suggestions\n  const onInputChange = (event: React.ChangeEvent<{}>, value: string) => {\n    setInputValue(value);\n    setLoading(true);\n    setAlreadySet(false);\n    setDeliberations([]);\n    if (value.length >= SharedConstants.deliberationSearchLengthLimit) {\n      appContext\n        .queryService()\n        .searchDeliberationQuery({\n          searchToken: value\n        })\n        .then(r => {\n          setLoading(false);\n          const existingLiens = props.lienDeliberations.map(\n            l => l.deliberation.id\n          );\n          const results = r.results.filter(r => !existingLiens.includes(r.id));\n          const libelles = r.results.map(r => r.libelle);\n          if (libelles.includes(value) && results.length === 0) {\n            setAlreadySet(true);\n          } else {\n            if (libelles.includes(value)) {\n              setDeliberations(results);\n            } else {\n              setDeliberations([\n                ...results,\n                {\n                  id: undefined,\n                  libelle: value\n                }\n              ]);\n            }\n          }\n        });\n    }\n  };\n  const openDialog = (libelle: string) => {\n    setValue(null);\n    setInputValue('');\n    setDeliberations([]);\n    setDialogLibelle(libelle);\n    // without it popup is directly submitted when user use 'enter'\n    defer(() => {\n      setDisplayDialog(true);\n    });\n  };\n  const onChange = (\n    event: ChangeEvent<{}>,\n    newValue: string | DeliberationItem | null\n  ) => {\n    if (typeof newValue === 'string') {\n      openDialog(newValue);\n    } else if (newValue) {\n      const deliberationId = newValue.id;\n      const deliberationDate = newValue.deliberationDate;\n      if (!deliberationId) {\n        openDialog(newValue.libelle);\n      } else {\n        if (!deliberationDate) {\n          throw Errors._82c7652b();\n        }\n        appContext\n          .commandService()\n          .addLienDeliberationCommand({\n            deliberationId, //: newValue.id,\n            organismeId: props.organismeId,\n            instanceId: props.instanceId\n          })\n          .then(r => {\n            const deliberation: DeliberationInfos = {\n              id: deliberationId,\n              libelle: newValue.libelle,\n              deliberationDate\n            };\n            addDeliberation({\n              id: r.lienDeliberationId,\n              deliberation\n            });\n            setInputValue('');\n            setValue(null);\n          });\n      }\n    }\n  };\n  const handleClose = () => {\n    setDisplayDialog(false);\n  };\n  return (\n    <React.Fragment>\n      <Autocomplete\n        value={value}\n        inputValue={inputValue}\n        onInputChange={onInputChange}\n        onChange={onChange}\n        getOptionLabel={(option: string | DeliberationItem) => {\n          if (typeof option === 'string') {\n            return option;\n          } else {\n            return option.libelle;\n          }\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        freeSolo\n        options={deliberations}\n        style={{ width: 300 }}\n        renderInput={params => (\n          <div>\n            <TextField\n              {...params}\n              label=\"Ajouter délibération\"\n              variant=\"outlined\"\n              size={'small'}\n              css={css`\n                background: ${colors.white};\n              `}\n            />\n            {loading && (\n              <div\n                css={css`\n                  position: absolute;\n                  top: 50%;\n                  right: 9px;\n                  margin-top: -12px;\n                  margin-left: -12px;\n                `}\n              >\n                <CircularProgress size={24} />\n              </div>\n            )}\n            {alreadySet && (\n              <div\n                css={css`\n                  font-size: 0.8rem;\n                `}\n              >\n                La délibération est déjà liée\n              </div>\n            )}\n          </div>\n        )}\n        renderOption={(option: DeliberationItem) => (\n          <div>\n            {!option.id && (\n              <span\n                css={css`\n                  font-weight: bold;\n                `}\n              >\n                [ajouter]{' '}\n              </span>\n            )}\n            {option.libelle}\n            {option.deliberationDate ? (\n              <span\n                css={css`\n                  font-size: 0.8rem;\n                `}\n              >\n                {' '}\n                (du {option.deliberationDate})\n              </span>\n            ) : null}\n          </div>\n        )}\n      />\n      <CreateDeliberationAndAddLienComponent\n        libelle={dialogLibelle}\n        organismeId={props.organismeId}\n        instanceId={props.instanceId}\n        addDeliberation={addDeliberation}\n        display={displayDialog}\n        close={handleClose}\n      />\n    </React.Fragment>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { InstanceId, OrganismeId } from '../../domain/ids';\nimport { LienDeliberationInfos } from '../../domain/organisme';\nimport { formatLocaleDate } from '../../simple-fr';\nimport { stringifyNominalString } from '../../utils/nominal-class';\nimport { AddLienDeliberationComponent } from './AddLienDeliberationComponent';\n\nexport const EditLienDeliberationsListComponent = (props: {\n  lienDeliberations: LienDeliberationInfos[];\n  organismeId: OrganismeId;\n  instanceId?: InstanceId;\n}) => {\n  const [lienDeliberations, setLienDeliberations] = useState<\n    LienDeliberationInfos[]\n  >(props.lienDeliberations);\n  return (\n    <div\n      css={css`\n        padding: 20px 10px 20px 10px;\n      `}\n    >\n      <h3\n        css={css`\n          padding-left: 40px;\n        `}\n      >\n        Délibérations\n      </h3>\n      <div\n        css={css`\n          margin: 20px 0;\n        `}\n      >\n        {lienDeliberations.map(d => (\n          <div\n            key={stringifyNominalString(d.id)}\n            css={css`\n              padding: 10px 0;\n            `}\n          >\n            {d.deliberation.libelle} du{' '}\n            {formatLocaleDate(d.deliberation.deliberationDate)}\n          </div>\n        ))}\n      </div>\n      <AddLienDeliberationComponent\n        organismeId={props.organismeId}\n        instanceId={props.instanceId}\n        lienDeliberations={lienDeliberations}\n        setLienDeliberations={setLienDeliberations}\n      />\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { PropsWithChildren, useEffect, useRef, useState } from 'react';\nimport { ClientUid } from '../../domain/client-ids';\nimport { clientUid } from '../../utils';\nimport {\n  HeightContext,\n  SharedHeightContextInterface\n} from './SharedHeightContainerContext';\n\nconst ContainerWrapped = (\n  props: PropsWithChildren<\n    SharedHeightContextInterface & {\n      groupId: ClientUid;\n    }\n  >\n) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [componentId] = useState(clientUid());\n  const heights = props.getHeights(props.groupId, componentId);\n  useEffect(() => {\n    const current = ref.current;\n    if (current) {\n      const clientHeight = current.clientHeight;\n      if (\n        heights === undefined ||\n        current.clientHeight !== heights.componentHeight\n      ) {\n        props.pushHeight(props.groupId, componentId, clientHeight);\n      }\n    }\n  });\n  return (\n    <div\n      css={css`\n        min-height: ${heights?.groupHeight ?? 0}px;\n      `}\n    >\n      <div ref={ref}>{props.children}</div>\n    </div>\n  );\n};\n\nexport const SharedHeightContainer = (\n  props: PropsWithChildren<{\n    groupId: ClientUid;\n  }>\n) => {\n  return (\n    <HeightContext.Consumer>\n      {({ getHeights, pushHeight }) => (\n        <ContainerWrapped\n          getHeights={getHeights}\n          pushHeight={pushHeight}\n          groupId={props.groupId}\n        >\n          {props.children}\n        </ContainerWrapped>\n      )}\n    </HeightContext.Consumer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { appContext } from '../../ApplicationContext';\nimport { RepresentantListId } from '../../domain/client-ids';\nimport { Elu } from '../../domain/elu';\nimport { EluId, InstanceId, OrganismeId } from '../../domain/ids';\nimport { Representant, RepresentantOrSuppleant } from '../../domain/organisme';\nimport { state } from '../../state/state';\nimport { colors } from '../../styles/vars';\nimport { Dict, getValue, set } from '../../utils/nominal-class';\nimport { representantListId } from './DragAndDropContainer';\n\nexport const AddRepresentantComponent = (props: {\n  organismeId: OrganismeId;\n  instanceId: InstanceId | undefined;\n  representantOrSuppleant: RepresentantOrSuppleant;\n  representantsLists: Dict<RepresentantListId, Representant[]>;\n  setRepresentantsLists: (\n    lists: Dict<RepresentantListId, Representant[]>\n  ) => void;\n}) => {\n  const elus = useRecoilValue(state.elus);\n  // material wants null, no undefined. To reproduce bug with undefined : select\n  // one elu and then blur the input\n  const [value, setValue] = useState<Elu | null>(null);\n  const [inputValue, setInputValue] = useState('');\n  const addRepresentant = (eluId: EluId) => {\n    appContext\n      .commandService()\n      .addRepresentantCommand({\n        eluId,\n        organismeId: props.organismeId,\n        instanceId: props.instanceId,\n        representantOrSuppleant: props.representantOrSuppleant\n      })\n      .then(r => {\n        const representant: Representant = {\n          id: r.id,\n          eluId\n        };\n        const listId = representantListId(\n          props.organismeId,\n          props.instanceId,\n          props.representantOrSuppleant\n        );\n        const newRepresentants = [\n          ...getValue(props.representantsLists, listId),\n          representant\n        ];\n        const newRepresentantsLists = set(\n          props.representantsLists,\n          listId,\n          newRepresentants\n        );\n        props.setRepresentantsLists(newRepresentantsLists);\n        setValue(null);\n        setInputValue('');\n      });\n  };\n  const label = (e: Elu | undefined) => (e ? `${e.nom} ${e.prenom}` : '');\n  return (\n    <Autocomplete\n      options={elus}\n      getOptionLabel={label}\n      clearOnEscape\n      clearOnBlur\n      value={value}\n      onChange={(e, value: Elu | null) => {\n        if (value) {\n          addRepresentant(value.id);\n        }\n      }}\n      inputValue={inputValue}\n      onInputChange={(e, v) => setInputValue(v)}\n      renderInput={params => (\n        <TextField\n          {...params}\n          label=\"Ajouter représentant\"\n          variant=\"outlined\"\n          css={css`\n            background: ${colors.white};\n          `}\n        />\n      )}\n      size={'small'}\n    />\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { EluId } from '../domain/ids';\nimport { state } from '../state/state';\nimport { getValue } from '../utils/nominal-class';\n\nexport const EluComponent = (props: { eluId: EluId }) => {\n  const elusById = useRecoilValue(state.elusById);\n  const e = getValue(elusById, props.eluId);\n  return (\n    <p>\n      {e.prenom} {e.nom}\n    </p>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { ButtonGroup } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport { Clear, KeyboardBackspace } from '@material-ui/icons';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { colors } from '../../styles/vars';\nimport { assertUnreachable } from '../../utils';\n\ntype DeleteState = 'delete' | 'confirm';\ntype ButtonSize = 'large' | 'small';\n\ninterface Props {\n  label?: string;\n  onDelete: () => void;\n  size: ButtonSize;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: '0 10px',\n    fontSize: '0.8rem',\n    textAlign: 'center',\n    background: colors.white,\n    width: (props: Props) => (props.size === 'large' ? '250px' : '20px')\n  }\n});\n\nexport const DeleteButton = (props: Props) => {\n  if (props.size === 'small' && !!props.label) {\n    throw Error('Small button cannot display a label');\n  }\n  if (props.size === 'large' && !props.label) {\n    throw Error('Large button needs a label');\n  }\n  const [state, setState] = useState<DeleteState>('delete');\n  const classes = useStyles(props);\n  // ce css est récupéré de la startIcon qu'on pourrait utiliser si seul le mode large existait\n  const iconSpanStyle = css`\n    margin-left: ${props.size === 'large' ? '-2px' : 0};\n    margin-right: ${props.size === 'large' ? '8px' : 0};\n    font-size: 18px;\n    display: inherit;\n    box-sizing: border-box;\n  `;\n  const iconStyle = css`\n    height: 1em;\n    width: 1em;\n    font-size: 18px;\n  `;\n  return (\n    <div>\n      {(() => {\n        switch (state) {\n          case 'delete':\n            return (\n              <Button\n                variant=\"outlined\"\n                size=\"small\"\n                onClick={() => setState('confirm')}\n                className={classes.root}\n              >\n                <span css={iconSpanStyle}>\n                  <Clear css={iconStyle} />\n                </span>\n                {props.label}\n              </Button>\n            );\n          case 'confirm':\n            return (\n              <ButtonGroup>\n                <Button\n                  size=\"small\"\n                  onClick={() => setTimeout(() => setState('delete'), 200)}\n                  autoFocus={true}\n                  className={classes.root}\n                >\n                  <span css={iconSpanStyle}>\n                    <KeyboardBackspace css={iconStyle} />\n                  </span>\n                  {props.size === 'large' && 'Annuler'}\n                </Button>\n                <Button\n                  size=\"small\"\n                  onClick={props.onDelete}\n                  className={classes.root}\n                  css={css`\n                    color: ${colors.errorRed};\n                    border-color: ${colors.errorRed};\n                  `}\n                >\n                  <span css={iconSpanStyle}>\n                    <DeleteIcon css={iconStyle} />\n                  </span>\n                  {props.size === 'large' && 'Supprimer'}\n                </Button>\n              </ButtonGroup>\n            );\n          default:\n            assertUnreachable(state);\n        }\n      })()}\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { appContext } from '../../ApplicationContext';\nimport { RepresentantListId } from '../../domain/client-ids';\nimport { InstanceId, OrganismeId, RepresentantId } from '../../domain/ids';\nimport { Representant, RepresentantOrSuppleant } from '../../domain/organisme';\nimport { Dict, getValue, set } from '../../utils/nominal-class';\nimport { DeleteButton } from '../base-component/DeleteButton';\nimport { representantListId } from './DragAndDropContainer';\n\nexport const DeleteRepresentantButton = (props: {\n  representantId: RepresentantId;\n  organismeId: OrganismeId;\n  instanceId?: InstanceId;\n  representantOrSuppleant: RepresentantOrSuppleant;\n  representantsLists: Dict<RepresentantListId, Representant[]>;\n  setRepresentantsLists: (\n    lists: Dict<RepresentantListId, Representant[]>\n  ) => void;\n}) => {\n  const deleteRepresentant = () => {\n    appContext\n      .commandService()\n      .deleteRepresentantCommand({ id: props.representantId })\n      .then(() => {\n        const listId = representantListId(\n          props.organismeId,\n          props.instanceId,\n          props.representantOrSuppleant\n        );\n        const newRepresentants = [\n          ...getValue(props.representantsLists, listId)\n        ].filter(r => r.id !== props.representantId);\n        const newLists = set(\n          props.representantsLists,\n          listId,\n          newRepresentants\n        );\n        props.setRepresentantsLists(newLists);\n      });\n  };\n  return (\n    // <Fab\n    //   // variant=\"outlined\"\n    //   color=\"secondary\"\n    //   size=\"small\"\n    //   // style={{ width: '20px', height: '20px', padding:0}}\n    //   onClick={}\n    // >\n    //   ✕\n    // </Fab>\n    <DeleteButton onDelete={deleteRepresentant} size={'small'} />\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport {\n  Draggable,\n  DraggableProvided,\n  DraggableStateSnapshot,\n  Droppable,\n  DroppableProvided,\n  DroppableStateSnapshot\n} from 'react-beautiful-dnd';\nimport { RepresentantListId } from '../../domain/client-ids';\nimport { InstanceId, OrganismeId } from '../../domain/ids';\nimport { Representant, RepresentantOrSuppleant } from '../../domain/organisme';\nimport { colors } from '../../styles/vars';\nimport { Dict, get, stringifyNominalString } from '../../utils/nominal-class';\nimport { EluComponent } from '../EluComponent';\nimport { DeleteRepresentantButton } from './DeleteRepresentantButton';\nimport { DragAndDropItem, representantListId } from './DragAndDropContainer';\n\nconst dragType: DragAndDropItem = 'representant';\n\nexport const RepresentantsListComponent = (props: {\n  organismeId: OrganismeId;\n  instanceId: InstanceId | undefined;\n  representantOrSuppleant: RepresentantOrSuppleant;\n  representantsLists: Dict<RepresentantListId, Representant[]>;\n  setRepresentantsLists: (\n    lists: Dict<RepresentantListId, Representant[]>\n  ) => void;\n  emptyListLabel: string;\n}) => {\n  const listId = representantListId(\n    props.organismeId,\n    props.instanceId,\n    props.representantOrSuppleant\n  );\n  const representants = get(props.representantsLists, listId) ?? [];\n  return (\n    <Droppable\n      type={dragType}\n      droppableId={stringifyNominalString(\n        representantListId(\n          props.organismeId,\n          props.instanceId,\n          props.representantOrSuppleant\n        )\n      )}\n    >\n      {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n          css={css`\n            // background: ${snapshot.isDraggingOver\n              ? 'lightblue'\n              : 'lightgrey'};\n          `}\n        >\n          {representants.length === 0 && (\n            <div\n              css={css`\n                margin: 10px 10px 6px 10px;\n                padding: 10px;\n                height: 44px;\n                border: 3px solid\n                  ${snapshot.isDraggingOver\n                    ? colors.lightblue\n                    : colors.clearGrey};\n                border-radius: 4px;\n                background: ${snapshot.isDraggingOver\n                  ? colors.lightblue\n                  : 'none'};\n              `}\n            >\n              {!snapshot.isDraggingOver && props.emptyListLabel}\n            </div>\n          )}\n          {representants.map((r, index) => (\n            <Draggable\n              key={stringifyNominalString(r.id)}\n              draggableId={stringifyNominalString(r.id)}\n              index={index}\n            >\n              {(\n                providedDraggable: DraggableProvided,\n                snapshotDraggable: DraggableStateSnapshot\n              ) => (\n                <div\n                  ref={providedDraggable.innerRef}\n                  {...providedDraggable.draggableProps}\n                  {...providedDraggable.dragHandleProps}\n                  css={css`\n                    user-select: none;\n                    padding: 10px 20px;\n                    margin: 4px 10px;\n                    background: ${snapshotDraggable.isDragging\n                      ? colors.dragableMoving\n                      : colors.clearGrey};\n                  `}\n                >\n                  {/*<div>{r.id}</div>*/}\n                  <EluComponent eluId={r.eluId} />\n                  <div\n                    css={css`\n                      position: absolute;\n                      top: 8px;\n                      right: 8px;\n                    `}\n                  >\n                    <DeleteRepresentantButton\n                      representantId={r.id}\n                      organismeId={props.organismeId}\n                      instanceId={props.instanceId}\n                      representantOrSuppleant={props.representantOrSuppleant}\n                      representantsLists={props.representantsLists}\n                      setRepresentantsLists={props.setRepresentantsLists}\n                    />\n                  </div>\n                </div>\n              )}\n            </Draggable>\n          ))}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { RepresentantListId } from '../../domain/client-ids';\nimport { InstanceId, OrganismeId } from '../../domain/ids';\nimport { Representant, RepresentantOrSuppleant } from '../../domain/organisme';\nimport {\n  Dict,\n  instanciateNominalString,\n  stringifyNominalString\n} from '../../utils/nominal-class';\nimport { SharedHeightContainer } from '../base-component/SharedHeightContainer';\nimport { AddRepresentantComponent } from './AddRepresentantComponent';\nimport { RepresentantsListComponent } from './RepresentantsListComponent';\n\nexport const EditRepresentantsListComponent = (props: {\n  organismeId: OrganismeId;\n  instanceId: InstanceId | undefined;\n  representantOrSuppleant: RepresentantOrSuppleant;\n  representantsLists: Dict<RepresentantListId, Representant[]>;\n  setRepresentantsLists: (\n    lists: Dict<RepresentantListId, Representant[]>\n  ) => void;\n  label: string;\n  emptyListLabel: string;\n}) => (\n  <React.Fragment>\n    <h4>{props.label}</h4>\n    <SharedHeightContainer\n      groupId={instanciateNominalString(\n        stringifyNominalString(\n          'representants-' +\n            (props.instanceId ? 'instances-' : '') +\n            props.organismeId\n        )\n      )}\n    >\n      <RepresentantsListComponent\n        organismeId={props.organismeId}\n        instanceId={props.instanceId}\n        representantOrSuppleant={props.representantOrSuppleant}\n        representantsLists={props.representantsLists}\n        setRepresentantsLists={props.setRepresentantsLists}\n        emptyListLabel={props.emptyListLabel}\n      />\n      <div\n        css={css`\n          padding: 4px 10px;\n        `}\n      >\n        <AddRepresentantComponent\n          organismeId={props.organismeId}\n          instanceId={props.instanceId}\n          representantOrSuppleant={props.representantOrSuppleant}\n          representantsLists={props.representantsLists}\n          setRepresentantsLists={props.setRepresentantsLists}\n        />\n      </div>\n    </SharedHeightContainer>\n  </React.Fragment>\n);\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { appContext } from '../../ApplicationContext';\nimport { RepresentantListId } from '../../domain/client-ids';\nimport { InstanceId, OrganismeId } from '../../domain/ids';\nimport { FullInstance, Representant } from '../../domain/organisme';\nimport { deleteFromDict, Dict } from '../../utils/nominal-class';\nimport { DeleteButton } from '../base-component/DeleteButton';\nimport { representantListId } from './DragAndDropContainer';\n\nexport const DeleteInstanceButton = (props: {\n  organismeId: OrganismeId;\n  instanceId: InstanceId;\n  instances: FullInstance[];\n  setInstances: (instances: FullInstance[]) => void;\n  representantsLists: Dict<RepresentantListId, Representant[]>;\n  setRepresentantsLists: (\n    lists: Dict<RepresentantListId, Representant[]>\n  ) => void;\n}) => {\n  const onDelete = () => {\n    appContext\n      .commandService()\n      .deleteInstanceCommand({ id: props.instanceId })\n      .then(() => {\n        const newInstances = [...props.instances].filter(\n          i => i.infos.id !== props.instanceId\n        );\n        props.setInstances(newInstances);\n        const newRepresentantsLists = deleteFromDict(\n          props.representantsLists,\n          representantListId(\n            props.organismeId,\n            props.instanceId,\n            'representant'\n          ),\n          representantListId(props.organismeId, props.instanceId, 'suppleant')\n        );\n        props.setRepresentantsLists(newRepresentantsLists);\n      });\n  };\n  return (\n    <DeleteButton\n      label={\"Supprimer l'instance\"}\n      onDelete={onDelete}\n      size=\"large\"\n    />\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport {\n  Draggable,\n  DraggableProvided,\n  DraggableStateSnapshot,\n  Droppable,\n  DroppableProvided,\n  DroppableStateSnapshot\n} from 'react-beautiful-dnd';\nimport { RepresentantListId } from '../../domain/client-ids';\nimport { OrganismeId } from '../../domain/ids';\nimport { FullInstance, Representant } from '../../domain/organisme';\nimport { colors } from '../../styles/vars';\nimport { Dict, stringifyNominalString } from '../../utils/nominal-class';\nimport { NombreRepresentantsComponent } from '../NombreRepresentantsComponent';\nimport { DeleteInstanceButton } from './DeleteInstanceButton';\nimport { DragAndDropItem } from './DragAndDropContainer';\nimport { EditLienDeliberationsListComponent } from './EditLienDeliberationsListComponent';\nimport { EditRepresentantsListComponent } from './EditRepresentantsListComponent';\n\nconst dragType: DragAndDropItem = 'instance';\n\nexport const InstancesListComponent = (props: {\n  organismeId: OrganismeId;\n  instances: FullInstance[];\n  setInstances: (instances: FullInstance[]) => void;\n  representantsLists: Dict<RepresentantListId, Representant[]>;\n  partageRepresentants: boolean;\n  setRepresentantsLists: (\n    lists: Dict<RepresentantListId, Representant[]>\n  ) => void;\n}) => {\n  return (\n    <Droppable\n      droppableId={stringifyNominalString(props.organismeId)}\n      type={dragType}\n      direction=\"horizontal\"\n    >\n      {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (\n        <div\n          ref={provided.innerRef}\n          {...provided.droppableProps}\n          css={css`\n            background: ${snapshot.isDraggingOver ? colors.lightblue : 'none'};\n            display: flex;\n          `}\n        >\n          {props.instances.map((i, index) => (\n            <Draggable\n              key={stringifyNominalString(i.infos.id)}\n              draggableId={stringifyNominalString(i.infos.id)}\n              index={index}\n            >\n              {(\n                providedDraggable: DraggableProvided,\n                snapshotDraggable: DraggableStateSnapshot\n              ) => (\n                <div\n                  ref={providedDraggable.innerRef}\n                  {...providedDraggable.draggableProps}\n                  css={css`\n                    flex: 1;\n                    user-select: none;\n                    // padding: {2 * padding}px;\n                    // margin: 0 0 {padding}px 0;\n                    background: ${snapshotDraggable.isDragging\n                      ? colors.dragableMoving\n                      : colors.clearGrey2};\n                    margin: 0 10px;\n                    border-radius: 0 0 4px 4px;\n                  `}\n                >\n                  <div\n                    {...providedDraggable.dragHandleProps}\n                    css={css`\n                      text-align: center;\n                      //margin: 12px 0;\n                      ::before {\n                        content: ' ';\n                        position: absolute;\n                        //top: 10px;\n                        left: 0;\n                        height: 6px;\n                        width: 100%;\n                        background: ${colors.clearGrey};\n                      }\n                    `}\n                  >\n                    <h3\n                      css={css`\n                        position: relative;\n                        top: -10px;\n                        display: inline-block;\n                        background: ${colors.white};\n                        border-radius: 4px;\n                        margin: 0 10px;\n                        padding: 0 60px;\n                      `}\n                    >\n                      {i.infos.nom}\n                    </h3>\n                  </div>\n                  <div\n                    css={css`\n                      padding: 0 20px;\n                    `}\n                  >\n                    {/*<div>{i.infos.id}</div>*/}\n                    {!props.partageRepresentants && (\n                      <div\n                        css={css`\n                          padding: 10px;\n                          width: 80%;\n                          margin: auto;\n                        `}\n                      >\n                        <NombreRepresentantsComponent\n                          nombreRepresentants={i.infos.nombreRepresentants}\n                          nombreSuppleants={i.infos.nombreSuppleants}\n                        />\n                      </div>\n                    )}\n                    {!props.partageRepresentants && (\n                      <div\n                        css={css`\n                          width: 100%;\n                          display: flex;\n                        `}\n                      >\n                        <div\n                          css={css`\n                            flex: 1;\n                          `}\n                        >\n                          <EditRepresentantsListComponent\n                            organismeId={i.infos.organismeId}\n                            instanceId={i.infos.id}\n                            representantOrSuppleant=\"representant\"\n                            representantsLists={props.representantsLists}\n                            setRepresentantsLists={props.setRepresentantsLists}\n                            label={'Représentants'}\n                            emptyListLabel={'Pas de représentant'}\n                          />\n                        </div>\n                        <div\n                          css={css`\n                            flex: 1;\n                          `}\n                        >\n                          <EditRepresentantsListComponent\n                            organismeId={i.infos.organismeId}\n                            instanceId={i.infos.id}\n                            representantOrSuppleant=\"suppleant\"\n                            representantsLists={props.representantsLists}\n                            setRepresentantsLists={props.setRepresentantsLists}\n                            label={'Suppléants'}\n                            emptyListLabel={'Pas de suppléant'}\n                          />\n                        </div>\n                      </div>\n                    )}\n                    <EditLienDeliberationsListComponent\n                      lienDeliberations={i.lienDeliberations}\n                      organismeId={props.organismeId}\n                      instanceId={i.infos.id}\n                    />\n                    <div\n                      css={css`\n                        text-align: center;\n                        margin-bottom: 20px;\n                      `}\n                    >\n                      <DeleteInstanceButton\n                        organismeId={props.organismeId}\n                        instanceId={i.infos.id}\n                        instances={props.instances}\n                        setInstances={props.setInstances}\n                        representantsLists={props.representantsLists}\n                        setRepresentantsLists={props.setRepresentantsLists}\n                      />\n                    </div>\n                  </div>\n                </div>\n              )}\n            </Draggable>\n          ))}\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { FormControlLabel } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { appContext } from '../../ApplicationContext';\nimport { Category } from '../../domain/bootstrap-data';\nimport { RepresentantListId } from '../../domain/client-ids';\nimport {\n  NatureJuridiqueId,\n  OrgarifId,\n  SecteurId,\n  TypeStructureId\n} from '../../domain/ids';\nimport {\n  FullInstance,\n  FullOrganisme,\n  Representant\n} from '../../domain/organisme';\nimport { state } from '../../state/state';\nimport {\n  Dict,\n  dict,\n  instanciateNominalString,\n  set,\n  setMutable\n} from '../../utils/nominal-class';\nimport { pipe } from '../../utils/Pipe';\nimport { SelectInput, SelectOption } from '../base-component/SelectInput';\nimport { NombreRepresentantsComponent } from '../NombreRepresentantsComponent';\nimport { AddInstanceComponent } from './AddInstanceComponent';\nimport {\n  DragAndDropContainer,\n  representantListId\n} from './DragAndDropContainer';\nimport { EditLienDeliberationsListComponent } from './EditLienDeliberationsListComponent';\nimport { EditRepresentantsListComponent } from './EditRepresentantsListComponent';\nimport { InstancesListComponent } from './InstancesListComponent';\n\nconst classes = {\n  categories: css`\n    padding: 0 20px;\n  `\n};\n\ninterface Props<C extends Category, I extends OrgarifId> {\n  label: string;\n  categoryList: C[];\n  categoryById: Dict<OrgarifId, C>;\n  currentId: I | undefined;\n  onChange: (id: I | undefined) => void;\n}\n\nexport const EditCategoryComponent = <C extends Category, I extends OrgarifId>(\n  props: Props<C, I>\n) => {\n  const options: SelectOption[] = props.categoryList.map(e => ({\n    value: e.id,\n    label: e.libelle\n  }));\n  options.unshift({\n    value: undefined,\n    label: `- Sans ${props.label.toLowerCase()} -`\n  });\n  const [value, setValue] = useState<I | undefined>(props.currentId);\n  return (\n    <SelectInput\n      label={props.label}\n      value={value}\n      options={options}\n      onChange={e => {\n        const id = e.target.value\n          ? instanciateNominalString<I>(e.target.value as string)\n          : undefined;\n        setValue(id);\n        props.onChange(id);\n      }}\n    />\n  );\n};\n\nexport const useWindowHeight = () => {\n  const [height, setHeight] = useState(0);\n\n  useEffect(() => {\n    const handleResize = () => setHeight(window.innerHeight);\n\n    window.addEventListener('resize', () => handleResize());\n\n    handleResize();\n\n    return () => window.removeEventListener('resize', handleResize);\n  });\n\n  return height;\n};\n\nexport const EditOrganismeComponent = (props: {\n  organisme: FullOrganisme;\n  setLoading: (l: boolean) => void;\n}) => {\n  const organisme = props.organisme;\n  const [instances, setInstances] = useState<FullInstance[]>(\n    organisme.instances\n  );\n  const [representantsLists, setRepresentantsLists] = useState(\n    dict<RepresentantListId, Representant[]>()\n  );\n  const [partageRepresentants, setPartageRepresentants] = useState(\n    organisme.infos.partageRepresentants\n  );\n  useEffect(() => {\n    const representants = pipe(dict<RepresentantListId, Representant[]>())\n      .map(list =>\n        set(\n          list,\n          representantListId(organisme.infos.id, undefined, 'representant'),\n          organisme.representants\n        )\n      )\n      .map(list =>\n        set(\n          list,\n          representantListId(organisme.infos.id, undefined, 'suppleant'),\n          organisme.suppleants\n        )\n      )\n      .unwrap();\n    organisme.instances.forEach(instance => {\n      setMutable(\n        representants,\n        representantListId(\n          organisme.infos.id,\n          instance.infos.id,\n          'representant'\n        ),\n        instance.representants\n      );\n      setMutable(\n        representants,\n        representantListId(organisme.infos.id, instance.infos.id, 'suppleant'),\n        instance.suppleants\n      );\n    });\n    setRepresentantsLists(representants);\n  }, [organisme]);\n  return (\n    <DragAndDropContainer\n      organisme={organisme}\n      representantsLists={representantsLists}\n      setRepresentantsLists={setRepresentantsLists}\n    >\n      <div\n        css={css`\n          width: 100%;\n        `}\n      >\n        <h2\n          css={css`\n            font-size: 2rem;\n            padding: 20px 50px;\n          `}\n        >\n          {organisme.infos.nom}\n        </h2>\n        <div\n          css={css`\n            width: 50%;\n            margin-bottom: 40px;\n          `}\n        >\n          <div css={classes.categories}>\n            <EditCategoryComponent\n              label=\"Nature juridique\"\n              categoryList={useRecoilValue(state.natureJuridiques)}\n              categoryById={useRecoilValue(state.natureJuridiquesById)}\n              currentId={organisme.infos.natureJuridiqueId}\n              onChange={(\n                natureJuridiqueId: NatureJuridiqueId | undefined | null\n              ) =>\n                appContext\n                  .commandService()\n                  .updateOrganismeNatureJuridiqueCommand({\n                    id: organisme.infos.id,\n                    natureJuridiqueId: natureJuridiqueId ?? undefined\n                  })\n              }\n            />\n          </div>\n          <div css={classes.categories}>\n            <EditCategoryComponent\n              label=\"Secteur\"\n              categoryList={useRecoilValue(state.secteurs)}\n              categoryById={useRecoilValue(state.secteursById)}\n              currentId={organisme.infos.secteurId}\n              onChange={(secteurId: SecteurId | undefined | null) =>\n                appContext.commandService().updateOrganismeSecteurCommand({\n                  id: organisme.infos.id,\n                  secteurId: secteurId ?? undefined\n                })\n              }\n            />\n          </div>\n          <div css={classes.categories}>\n            <EditCategoryComponent\n              label=\"Type de structure\"\n              categoryList={useRecoilValue(state.typeStructures)}\n              categoryById={useRecoilValue(state.typeStructuresById)}\n              currentId={organisme.infos.typeStructureId}\n              onChange={(typeStructureId: TypeStructureId | undefined | null) =>\n                appContext\n                  .commandService()\n                  .updateOrganismeTypeStructureCommand({\n                    id: organisme.infos.id,\n                    typeStructureId: typeStructureId ?? undefined\n                  })\n              }\n            />\n          </div>\n          <div css={classes.categories}>\n            <div\n              css={css`\n                display: flex;\n              `}\n            >\n              <div\n                css={css`\n                  flex: 25%;\n                  font-size: 1rem;\n                  text-align: right;\n                  padding: 19px 10px 0 0;\n                `}\n              >\n                Ajouter une instance\n              </div>\n              <div\n                css={css`\n                  flex: 75%;\n                  padding: 8px 6px 0 4px;\n                `}\n              >\n                <AddInstanceComponent\n                  organismeId={organisme.infos.id}\n                  instances={instances}\n                  setInstances={setInstances}\n                  representantsLists={representantsLists}\n                  setRepresentantsLists={setRepresentantsLists}\n                />\n              </div>\n            </div>\n          </div>\n          {instances.length !== 0 && (\n            <div css={classes.categories}>\n              <div\n                css={css`\n                  display: flex;\n                `}\n              >\n                <div\n                  css={css`\n                    flex: 25%;\n                    font-size: 1rem;\n                    text-align: right;\n                    padding: 19px 10px 0 0;\n                  `}\n                />\n                <div\n                  css={css`\n                    flex: 75%;\n                    padding: 8px 6px 0 4px;\n                  `}\n                >\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={partageRepresentants}\n                        onChange={() => {\n                          appContext\n                            .commandService()\n                            .updateOrganismePartageRepresentantsCommand({\n                              id: props.organisme.infos.id,\n                              partageRepresentants: !partageRepresentants\n                            })\n                            .then(() =>\n                              setPartageRepresentants(!partageRepresentants)\n                            );\n                        }}\n                        name=\"checkedB\"\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Partage des représentants\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n        {(instances.length === 0 || partageRepresentants) && (\n          <React.Fragment>\n            <NombreRepresentantsComponent\n              nombreRepresentants={organisme.infos.nombreRepresentants}\n              nombreSuppleants={organisme.infos.nombreSuppleants}\n            />\n            <div\n              css={css`\n                width: 50%;\n                margin: 10px 50px;\n                padding: 0 40px;\n                display: flex;\n              `}\n            >\n              <div\n                css={css`\n                  flex: 1;\n                `}\n              >\n                <EditRepresentantsListComponent\n                  organismeId={organisme.infos.id}\n                  instanceId={undefined}\n                  representantOrSuppleant=\"representant\"\n                  representantsLists={representantsLists}\n                  setRepresentantsLists={setRepresentantsLists}\n                  label={'Représentants'}\n                  emptyListLabel={'Pas de représentant'}\n                />\n              </div>\n              <div\n                css={css`\n                  flex: 1;\n                  padding-bottom: 30px;\n                `}\n              >\n                <EditRepresentantsListComponent\n                  organismeId={organisme.infos.id}\n                  instanceId={undefined}\n                  representantOrSuppleant=\"suppleant\"\n                  representantsLists={representantsLists}\n                  setRepresentantsLists={setRepresentantsLists}\n                  label={'Suppléants'}\n                  emptyListLabel={'Pas de suppléant'}\n                />\n              </div>\n            </div>\n          </React.Fragment>\n        )}\n        {instances.length !== 0 && (\n          <div\n            css={css`\n              margin: 0 20px;\n            `}\n          >\n            <InstancesListComponent\n              organismeId={organisme.infos.id}\n              instances={instances}\n              setInstances={setInstances}\n              representantsLists={representantsLists}\n              partageRepresentants={partageRepresentants}\n              setRepresentantsLists={setRepresentantsLists}\n            />\n          </div>\n        )}\n        <div\n          css={css`\n            width: 50%;\n            margin: 10px 50px;\n            padding: 0 40px;\n            display: flex;\n          `}\n        >\n          <EditLienDeliberationsListComponent\n            lienDeliberations={organisme.lienDeliberations}\n            organismeId={organisme.infos.id}\n          />\n        </div>\n      </div>\n    </DragAndDropContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@material-ui/core';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { appContext } from '../ApplicationContext';\nimport { SimpleForm } from '../component/base-component/SimpleForm';\nimport { TextInput } from '../component/base-component/TextInput';\nimport { MainContainer } from '../container/MainContainer';\nimport { OrganismeInfos } from '../domain/organisme';\nimport { RouteLink } from '../routing/RouteLink';\nimport { colors } from '../styles/vars';\nimport { stringifyNominalString } from '../utils/nominal-class';\n\nexport const ListOrganismesView = () => {\n  const [organismes, setOrganismes] = useState<OrganismeInfos[] | undefined>(\n    undefined\n  );\n  useEffect(() => {\n    appContext\n      .queryService()\n      .listOrganismesQuery()\n      .then(r => {\n        setOrganismes(r.organismes);\n      });\n  }, []);\n  const newOrganismeOnSubmit = (dto: { nom: string }) => {\n    if (dto.nom !== '') {\n      appContext\n        .commandService()\n        .createOrganismeCommand(dto)\n        .then(r => {\n          appContext.applicationHistory().goTo({\n            name: 'EditOrganismeRoute',\n            id: r.id\n          });\n        });\n    }\n  };\n  return (\n    <MainContainer>\n      <h1>Liste des organismes</h1>\n      <SimpleForm onSubmit={newOrganismeOnSubmit}>\n        <TextInput name=\"nom\" label=\"Nouvel organisme\" />\n        <Button type=\"submit\" color=\"primary\">\n          ok\n        </Button>\n      </SimpleForm>\n      {!organismes && <div>Chargement...</div>}\n      {organismes &&\n        organismes.map(o => (\n          <div\n            key={stringifyNominalString(o.id)}\n            css={css`\n              background: ${colors.clearGrey};\n              margin: 2px 0;\n              padding: 4px;\n            `}\n          >\n            <h2>{o.nom}</h2>\n            {/*<RouteLink route={{ name: 'OrganismeRoute', id: o.id }}>*/}\n            {/*  view*/}\n            {/*</RouteLink>*/}\n            {/*<br />*/}\n            <RouteLink route={{ name: 'EditOrganismeRoute', id: o.id }}>\n              Éditer\n            </RouteLink>\n          </div>\n        ))}\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport FormControl from '@material-ui/core/FormControl';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { clientUid } from '../../utils';\nimport { stringifyNominalString } from '../../utils/nominal-class';\n\n// [doc] material password input doesn't send its value in a classic form\n// submission... so we have to use a hook to get the value\nexport const PasswordInput = (props: {\n  label: string;\n  value: string;\n  setValue: (value: string) => void;\n}) => {\n  const [id] = useState(clientUid());\n  const [showPassword, setShowPassword] = useState(false);\n  const toggleShowPassword = () => setShowPassword(!showPassword);\n  const handleMouseDownPassword = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    event.preventDefault();\n  };\n  return (\n    <FormControl variant=\"outlined\" size=\"small\" fullWidth={true}>\n      <InputLabel htmlFor={stringifyNominalString(id)}>Password</InputLabel>\n      <OutlinedInput\n        id={stringifyNominalString(id)}\n        type={showPassword ? 'text' : 'password'}\n        value={props.value}\n        onChange={e => props.setValue(e.target.value)}\n        label={props.label}\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              onClick={toggleShowPassword}\n              onMouseDown={handleMouseDownPassword}\n              edge=\"end\"\n            >\n              {showPassword ? <Visibility /> : <VisibilityOff />}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n    </FormControl>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@material-ui/core';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { PasswordInput } from '../component/base-component/PasswordInput';\nimport { SimpleForm } from '../component/base-component/SimpleForm';\nimport { TextInput } from '../component/base-component/TextInput';\n\nexport interface LoginFormDto {\n  login: string;\n  password: string;\n}\n\ninterface Props {\n  onSubmit: (dto: LoginFormDto) => void;\n}\n\nexport const LoginForm = (props: Props) => {\n  const [password, setPassword] = useState('');\n  return (\n    <SimpleForm\n      onSubmit={(dto: { login: string }) =>\n        props.onSubmit({\n          login: dto.login,\n          password\n        })\n      }\n    >\n      <div\n        css={css`\n          margin: 10px 0;\n        `}\n      >\n        <TextInput name={'login'} label={'E-mail'} />\n      </div>\n      <div\n        css={css`\n          margin: 10px 0;\n        `}\n      >\n        <PasswordInput\n          label=\"Mot de passe\"\n          value={password}\n          setValue={setPassword}\n        />\n      </div>\n      <Button type=\"submit\">Se connecter</Button>\n    </SimpleForm>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport {\n  FullInstance,\n  FullOrganisme,\n  LienDeliberationInfos,\n  Representant\n} from '../domain/organisme';\nimport { state } from '../state/state';\nimport { colors } from '../styles/vars';\nimport { getValue, stringifyNominalString } from '../utils/nominal-class';\nimport { EluComponent } from './EluComponent';\n\nconst classes = {\n  categories: css`\n    padding: 0 20px;\n    font-size: 0.8rem;\n  `\n};\n\nconst Separator = () => (\n  <div\n    css={css`\n      width: 1px;\n      background: ${colors.grey};\n      margin: 30px 0 4px 0;\n    `}\n  />\n);\n\nconst NombreRepresentants = (props: {\n  nombreRepresentants?: number;\n  nombreSuppleants?: number;\n}) => (\n  <div>\n    {props.nombreRepresentants} représentants, {props.nombreSuppleants}{' '}\n    suppléants\n  </div>\n);\n\nconst RepresentantsComponent = (props: {\n  representants: Representant[];\n  suppleants: Representant[];\n}) => {\n  if (props.representants.length === 0 && props.suppleants.length === 0) {\n    return null;\n  }\n  return (\n    <div\n      css={css`\n        display: flex;\n      `}\n    >\n      {props.representants.length !== 0 && (\n        <div\n          css={css`\n            padding: 0 20px;\n          `}\n        >\n          <h3>Représentants</h3>\n          {props.representants.map(r => (\n            <EluComponent key={stringifyNominalString(r.id)} eluId={r.eluId} />\n          ))}\n        </div>\n      )}\n      {props.representants.length !== 0 && props.suppleants.length !== 0 && (\n        <Separator />\n      )}\n      {props.suppleants.length !== 0 && (\n        <div\n          css={css`\n            padding: 0 20px;\n          `}\n        >\n          <h3>Suppléants</h3>\n          {props.suppleants.map(r => (\n            <EluComponent key={stringifyNominalString(r.id)} eluId={r.eluId} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst DeliberationsComponent = (props: {\n  lienDeliberations: LienDeliberationInfos[];\n}) => {\n  if (props.lienDeliberations.length === 0) {\n    return null;\n  }\n  return (\n    <div>\n      <h3>Délibérations</h3>\n      {props.lienDeliberations.map(d => (\n        <div key={stringifyNominalString(d.id)}>\n          {d.deliberation.libelle} du {d.deliberation.deliberationDate}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst InstanceComponent = (props: { instance: FullInstance }) => (\n  <div>\n    <h4>{props.instance.infos.nom}</h4>\n    <NombreRepresentants\n      nombreRepresentants={props.instance.infos.nombreRepresentants}\n      nombreSuppleants={props.instance.infos.nombreSuppleants}\n    />\n    <RepresentantsComponent\n      representants={props.instance.representants}\n      suppleants={props.instance.suppleants}\n    />\n    <DeliberationsComponent\n      lienDeliberations={props.instance.lienDeliberations}\n    />\n  </div>\n);\n\nexport const OrganismeComponent = (props: { organisme: FullOrganisme }) => {\n  const organisme = props.organisme;\n  const natureJuridiquesById = useRecoilValue(state.natureJuridiquesById);\n  const secteursById = useRecoilValue(state.secteursById);\n  const typeStructuresById = useRecoilValue(state.typeStructuresById);\n  return (\n    <div\n      css={css`\n        width: 100%;\n      `}\n    >\n      <h2>{organisme.infos.nom}</h2>\n      <div\n        css={css`\n          display: flex;\n        `}\n      >\n        {organisme.infos.natureJuridiqueId && (\n          <div css={classes.categories}>\n            Nature juridique :{' '}\n            {\n              getValue(natureJuridiquesById, organisme.infos.natureJuridiqueId)\n                .libelle\n            }\n          </div>\n        )}\n        {organisme.infos.secteurId && (\n          <div css={classes.categories}>\n            Secteur :{' '}\n            {getValue(secteursById, organisme.infos.secteurId).libelle}\n          </div>\n        )}\n        {organisme.infos.typeStructureId && (\n          <div css={classes.categories}>\n            Type de structure :{' '}\n            {\n              getValue(typeStructuresById, organisme.infos.typeStructureId)\n                .libelle\n            }\n          </div>\n        )}\n      </div>\n      <NombreRepresentants\n        nombreRepresentants={organisme.infos.nombreRepresentants}\n        nombreSuppleants={organisme.infos.nombreSuppleants}\n      />\n      <RepresentantsComponent\n        representants={organisme.representants}\n        suppleants={organisme.suppleants}\n      />\n      <DeliberationsComponent lienDeliberations={organisme.lienDeliberations} />\n      {organisme.instances.length !== 0 && (\n        <div>\n          <h3>Instances</h3>\n          {organisme.instances.map(i => (\n            <InstanceComponent\n              key={stringifyNominalString(i.infos.id)}\n              instance={i}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@material-ui/core';\nimport * as React from 'react';\nimport { ChangeEvent, useState } from 'react';\nimport { appContext } from '../ApplicationContext';\nimport { PasswordInput } from '../component/base-component/PasswordInput';\nimport { SimpleForm } from '../component/base-component/SimpleForm';\nimport { TextInput } from '../component/base-component/TextInput';\n\nexport interface RegisterFormDto {\n  mail: string;\n  password: string;\n}\n\ninterface Props {\n  onSubmit: (dto: RegisterFormDto) => void;\n}\n\nexport const RegisterForm = (props: Props) => {\n  const [mailIsAlreadyTaken, setMailIsAlreadyTaken] = useState(false);\n  const [password, setPassword] = useState('');\n  const checkLoginAvailability = (event: ChangeEvent<HTMLInputElement>) => {\n    const login = event.target.value;\n    appContext\n      .queryService()\n      .isLoginAlreadyTakenQuery({ login })\n      .then(r => {\n        setMailIsAlreadyTaken(r.alreadyTaken);\n      });\n  };\n  return (\n    <SimpleForm\n      onSubmit={(dto: { mail: string }) =>\n        props.onSubmit({\n          mail: dto.mail,\n          password\n        })\n      }\n    >\n      <div\n        css={css`\n          margin: 10px 0;\n        `}\n      >\n        <TextInput\n          name=\"mail\"\n          label={'E-mail'}\n          onChange={checkLoginAvailability}\n        />\n      </div>\n      {mailIsAlreadyTaken && (\n        <div\n          css={css`\n            margin: 10px 0;\n          `}\n        >\n          L'e-mail est déjà pris\n        </div>\n      )}\n      <div\n        css={css`\n          margin: 10px 0;\n        `}\n      >\n        <PasswordInput\n          label=\"Mode de passe\"\n          value={password}\n          setValue={setPassword}\n        />\n      </div>\n      <Button type=\"submit\">Créer le compte</Button>\n    </SimpleForm>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { appContext } from '../ApplicationContext';\nimport { MainContainer } from '../container/MainContainer';\nimport { RegisterCommand } from '../domain/commands';\nimport { RegisterResult } from '../domain/user';\nimport { Errors } from '../errors';\nimport { RegisterForm, RegisterFormDto } from '../form/RegisterForm';\nimport { RouteLink } from '../routing/RouteLink';\nimport { state } from '../state/state';\nimport { assertUnreachable } from '../utils';\n\nexport const RegisterView = () => {\n  const [userInfos, setUserInfos] = useRecoilState(state.userInfos);\n  const [registerResult, setRegisterResult] = useState<\n    RegisterResult | undefined\n  >(undefined);\n  const register = (registerInput: RegisterFormDto) => {\n    const registerCommand: RegisterCommand = registerInput;\n    appContext\n      .commandService()\n      .registerCommand(registerCommand)\n      .then(r => {\n        switch (r.result) {\n          case 'REGISTERED':\n            if (!r.userinfos) {\n              throw Errors._db434940();\n            }\n            appContext.csrfTokenService().refreshToken();\n            setUserInfos(r.userinfos);\n            break;\n          case 'MAIL_ALREADY_EXISTS':\n            break;\n          default:\n            assertUnreachable(r.result);\n        }\n        setRegisterResult(r.result);\n      });\n  };\n  return (\n    <MainContainer>\n      <div\n        css={css`\n          display: flex;\n          justify-content: center;\n        `}\n      >\n        <div>\n          <h1\n            css={css`\n              text-align: center;\n            `}\n          >\n            Inscription\n          </h1>\n          <div\n            css={css`\n              width: 400px;\n            `}\n          >\n            {registerResult !== 'REGISTERED' && !userInfos && (\n              <RegisterForm onSubmit={register} />\n            )}\n            {userInfos && (\n              <div\n                css={css`\n                  text-align: center;\n                `}\n              >\n                Vous êtes connecté\n                <br />\n                <RouteLink\n                  route={{\n                    name: 'ListOrganismesRoute'\n                  }}\n                >\n                  Liste des organismes\n                </RouteLink>\n              </div>\n            )}\n            {registerResult === 'MAIL_ALREADY_EXISTS' && (\n              <div\n                css={css`\n                  text-align: center;\n                `}\n              >\n                Il existe déjà un compte avec cet email\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </MainContainer>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport { OrganismeId, SecteurId } from '../domain/ids';\nimport { EditOrganismeView } from '../view/EditOrganismeView';\nimport { ListOrganismesBySecteurView } from '../view/ListOrganismesBySecteurView';\nimport { ListOrganismesView } from '../view/ListOrganismesView';\nimport { LoginView } from '../view/LoginView';\nimport { OrganismeView } from '../view/OrganismeView';\nimport { RegisterView } from '../view/RegisterView';\nimport { RootView } from '../view/RootView';\n\nexport type Route =\n  | EditOrganismeRoute\n  | ListOrganismesBySecteurRoute\n  | ListOrganismesRoute\n  | LoginRoute\n  | OrganismeRoute\n  | RegisterRoute\n  | RootRoute;\n\ntype AuthenticationLevel = 'neutral' | 'loggedIn' | 'loggedOut' | 'admin';\n\ninterface ViewParameters<R extends Route> {\n  routeParams: R;\n}\n\ninterface RouteProps {\n  path: string;\n  component: FunctionComponent<ViewParameters<any>>;\n  authenticationLevel: AuthenticationLevel;\n  onEnter?: () => void;\n}\n\nexport const routes: Record<Route['name'], RouteProps> = {\n  EditOrganismeRoute: {\n    path: '/edition-organisme/:id',\n    component: EditOrganismeView,\n    authenticationLevel: 'loggedIn'\n  },\n  ListOrganismesBySecteurRoute: {\n    path: '/organismes-par-secteur/:secteurId',\n    component: ListOrganismesBySecteurView,\n    authenticationLevel: 'loggedOut'\n  },\n  ListOrganismesRoute: {\n    path: '/organismes',\n    component: ListOrganismesView,\n    authenticationLevel: 'loggedOut'\n  },\n  LoginRoute: {\n    path: '/login',\n    component: LoginView,\n    authenticationLevel: 'loggedOut'\n  },\n  OrganismeRoute: {\n    path: '/organisme/:id',\n    component: OrganismeView,\n    authenticationLevel: 'loggedIn'\n  },\n  RegisterRoute: {\n    path: '/register',\n    component: RegisterView,\n    authenticationLevel: 'loggedOut'\n  },\n  RootRoute: {\n    path: '/',\n    component: RootView,\n    authenticationLevel: 'neutral'\n  }\n};\n\nexport interface EditOrganismeRoute {\n  name: 'EditOrganismeRoute';\n  id: OrganismeId;\n}\n\nexport interface ListOrganismesBySecteurRoute {\n  name: 'ListOrganismesBySecteurRoute';\n  secteurId: SecteurId;\n}\n\ninterface ListOrganismesRoute {\n  name: 'ListOrganismesRoute';\n}\n\ninterface LoginRoute {\n  name: 'LoginRoute';\n}\n\ninterface OrganismeRoute {\n  name: 'OrganismeRoute';\n  id: OrganismeId;\n}\n\ninterface RegisterRoute {\n  name: 'RegisterRoute';\n}\n\ninterface RootRoute {\n  name: 'RootRoute';\n}\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { ArrowBackIos } from '@material-ui/icons';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { appContext } from '../ApplicationContext';\nimport { EditOrganismeComponent } from '../component/edit/EditOrganismeComponent';\nimport { MainContainer } from '../container/MainContainer';\nimport { FullOrganisme } from '../domain/organisme';\nimport { RouteLink } from '../routing/RouteLink';\nimport { EditOrganismeRoute } from '../routing/routes';\n\nexport const EditOrganismeView = (props: {\n  routeParams: EditOrganismeRoute;\n}) => {\n  const [organisme, setOrganisme] = useState<FullOrganisme | undefined>(\n    undefined\n  );\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    appContext\n      .queryService()\n      .getOrganismeQuery({ id: props.routeParams.id })\n      .then(r => {\n        setLoading(false);\n        setOrganisme(r.organisme);\n      });\n  }, [props.routeParams.id]);\n  return (\n    <MainContainer>\n      <RouteLink route={{ name: 'ListOrganismesRoute' }}>\n        <span\n          css={css`\n            top: 6px;\n          `}\n        >\n          <ArrowBackIos />\n        </span>{' '}\n        Retour liste des organismes\n      </RouteLink>\n      {loading && <div>Chargement...</div>}\n      {organisme && (\n        <EditOrganismeComponent organisme={organisme} setLoading={setLoading} />\n      )}\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@material-ui/core';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { appContext } from '../ApplicationContext';\nimport { SimpleForm } from '../component/base-component/SimpleForm';\nimport { TextInput } from '../component/base-component/TextInput';\nimport { MainContainer } from '../container/MainContainer';\nimport { OrganismeInfos } from '../domain/organisme';\nimport { RouteLink } from '../routing/RouteLink';\nimport { ListOrganismesBySecteurRoute } from '../routing/routes';\nimport { state } from '../state/state';\nimport { colors } from '../styles/vars';\nimport { getValue, stringifyNominalString } from '../utils/nominal-class';\n\nexport const ListOrganismesBySecteurView = (props: {\n  routeParams: ListOrganismesBySecteurRoute;\n}) => {\n  const [organismes, setOrganismes] = useState<OrganismeInfos[] | undefined>(\n    undefined\n  );\n  const secteurById = useRecoilValue(state.secteursById);\n  const secteur = getValue(secteurById, props.routeParams.secteurId);\n  useEffect(() => {\n    appContext\n      .queryService()\n      .listOrganismesBySecteurQuery({\n        secteurId: props.routeParams.secteurId\n      })\n      .then(r => {\n        setOrganismes(r.organismes);\n      });\n  }, [props.routeParams.secteurId]);\n  const newOrganismeOnSubmit = (dto: { nom: string }) => {\n    if (dto.nom !== '') {\n      appContext\n        .commandService()\n        .createOrganismeCommand(dto)\n        .then(r => {\n          appContext.applicationHistory().goTo({\n            name: 'EditOrganismeRoute',\n            id: r.id\n          });\n        });\n    }\n  };\n  return (\n    <MainContainer>\n      <h1>{secteur.libelle}</h1>\n      <SimpleForm onSubmit={newOrganismeOnSubmit}>\n        <TextInput name=\"nom\" label=\"Nouvel organisme\" />\n        <Button type=\"submit\" color=\"primary\">\n          ok\n        </Button>\n      </SimpleForm>\n      {!organismes && <div>Chargement...</div>}\n      {organismes &&\n        organismes.map(o => (\n          <div\n            key={stringifyNominalString(o.id)}\n            css={css`\n              background: ${colors.clearGrey};\n              margin: 2px 0;\n              padding: 4px;\n            `}\n          >\n            <h2>{o.nom}</h2>\n            {/*<RouteLink route={{ name: 'OrganismeRoute', id: o.id }}>*/}\n            {/*  view*/}\n            {/*</RouteLink>*/}\n            {/*<br />*/}\n            <RouteLink route={{ name: 'EditOrganismeRoute', id: o.id }}>\n              Éditer\n            </RouteLink>\n          </div>\n        ))}\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport Button from '@material-ui/core/Button';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { appContext } from '../ApplicationContext';\nimport { applicationBootstrapData } from '../constants';\nimport { MainContainer } from '../container/MainContainer';\nimport { LoginResult } from '../domain/user';\nimport { Errors } from '../errors';\nimport { LoginForm, LoginFormDto } from '../form/LoginForm';\nimport { RouteLink } from '../routing/RouteLink';\nimport { state } from '../state/state';\nimport { assertUnreachable } from '../utils';\n\nexport const LoginView = () => {\n  const [userInfos, setUserInfos] = useRecoilState(state.userInfos);\n  const [loginResult, setLoginResult] = useState<LoginResult | undefined>(\n    undefined\n  );\n  const login = (data: LoginFormDto) => {\n    appContext\n      .commandService()\n      .loginCommand(data)\n      .then(r => {\n        setLoginResult(r.result);\n        switch (r.result) {\n          case 'LOGGED_IN':\n            if (!r.userinfos) {\n              throw Errors._198c103e();\n            }\n            appContext.csrfTokenService().refreshToken();\n            setUserInfos(r.userinfos);\n            break;\n          case 'USER_NOT_FOUND':\n          case 'BAD_PASSWORD':\n            break;\n          default:\n            assertUnreachable(r.result);\n        }\n      });\n  };\n  return (\n    <MainContainer>\n      <div\n        css={css`\n          display: flex;\n          justify-content: center;\n        `}\n      >\n        <div>\n          <h1\n            css={css`\n              text-align: center;\n            `}\n          >\n            Identification\n          </h1>\n          <div\n            css={css`\n              width: 400px;\n            `}\n          >\n            {loginResult !== 'LOGGED_IN' && !userInfos && (\n              <LoginForm onSubmit={login} />\n            )}\n            {!userInfos && applicationBootstrapData.env === 'dev' && (\n              <div\n                css={css`\n                  margin-top: 20px;\n                `}\n              >\n                dev user authent :{' '}\n                <Button\n                  onClick={() =>\n                    login({\n                      login: 'user',\n                      password: 'user'\n                    })\n                  }\n                >\n                  user\n                </Button>\n                <Button\n                  onClick={() =>\n                    login({\n                      login: 'admin',\n                      password: 'admin'\n                    })\n                  }\n                >\n                  admin\n                </Button>\n              </div>\n            )}\n            {userInfos && (\n              <div\n                css={css`\n                  text-align: center;\n                `}\n              >\n                Vous êtes connecté\n                <br />\n                <RouteLink\n                  route={{\n                    name: 'ListOrganismesRoute'\n                  }}\n                >\n                  Liste des organismes\n                </RouteLink>\n              </div>\n            )}\n            {loginResult && (\n              <div\n                css={css`\n                  text-align: center;\n                  margin-top: 20px;\n                `}\n              >\n                {(() => {\n                  switch (loginResult) {\n                    case 'LOGGED_IN':\n                      return null;\n                    case 'USER_NOT_FOUND':\n                      return <div>Utilisateur non trouvé</div>;\n                    case 'BAD_PASSWORD':\n                      return <div>Mauvais mot de passe</div>;\n                    default:\n                      assertUnreachable(loginResult);\n                  }\n                })()}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { appContext } from '../ApplicationContext';\nimport { OrganismeComponent } from '../component/OrganismeComponent';\nimport { MainContainer } from '../container/MainContainer';\nimport { FullOrganisme } from '../domain/organisme';\nimport { RouteLink } from '../routing/RouteLink';\nimport { EditOrganismeRoute } from '../routing/routes';\n\nexport const OrganismeView = (props: { routeParams: EditOrganismeRoute }) => {\n  const [organisme, setOrganisme] = useState<FullOrganisme | undefined>(\n    undefined\n  );\n  useEffect(() => {\n    appContext\n      .queryService()\n      .getOrganismeQuery({ id: props.routeParams.id })\n      .then(r => {\n        setOrganisme(r.organisme);\n      });\n  }, [props.routeParams.id]);\n  return (\n    <MainContainer>\n      <RouteLink route={{ name: 'ListOrganismesRoute' }}>list</RouteLink>\n      {!organisme && <div>Chargement...</div>}\n      {organisme && <OrganismeComponent organisme={organisme} />}\n    </MainContainer>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { MainContainer } from '../container/MainContainer';\nimport { RouteLink } from '../routing/RouteLink';\nimport { state } from '../state/state';\nimport { stringifyNominalString } from '../utils/nominal-class';\n\nexport const RootView = () => {\n  const [userInfos] = useRecoilState(state.userInfos);\n  const [secteurs] = useRecoilState(state.secteurs);\n  return (\n    <MainContainer>\n      {!userInfos && (\n        <RouteLink\n          route={{\n            name: 'LoginRoute'\n          }}\n        >\n          Se connecter\n        </RouteLink>\n      )}\n      {userInfos && (\n        <div>\n          <RouteLink\n            route={{\n              name: 'ListOrganismesRoute'\n            }}\n          >\n            Tous les organismes\n          </RouteLink>\n          <h3>Par secteur</h3>\n          {secteurs.map(s => (\n            <div key={stringifyNominalString(s.id)}>\n              <RouteLink\n                route={{\n                  name: 'ListOrganismesBySecteurRoute',\n                  secteurId: s.id\n                }}\n              >\n                {s.libelle}\n              </RouteLink>\n            </div>\n          ))}\n        </div>\n      )}\n    </MainContainer>\n  );\n};\n","import * as history from 'history';\nimport { Route, routes } from './routes';\n\nexport class ApplicationHistory {\n  private _browserHistory = history.createBrowserHistory();\n\n  public get browserHistory() {\n    return this._browserHistory;\n  }\n\n  public goTo(route: Route) {\n    this._browserHistory.push(this.buildPath(route));\n  }\n\n  public goToReplace(route: Route) {\n    this._browserHistory.replace(this.buildPath(route));\n  }\n\n  public buildPath(route: Route): string {\n    let path = routes[route.name].path;\n    Object.keys(route)\n      .filter(k => k !== 'name')\n      .forEach((k: string) => {\n        // @ts-ignore\n        const param = route[k];\n        if (path.indexOf(k) === -1) {\n          throw Error(`Missing parameter ${k} in ${path}.`);\n        }\n        path = path.replace(':' + k, param);\n      });\n    return path;\n  }\n}\n","import { appContext } from '../ApplicationContext';\nimport {\n  AddInstanceCommand,\n  AddInstanceCommandResponse,\n  AddLienDeliberationCommand,\n  AddLienDeliberationCommandResponse,\n  AddRepresentantCommand,\n  AddRepresentantCommandResponse,\n  CreateDeliberationAndAddLienCommand,\n  CreateDeliberationAndAddLienCommandResponse,\n  CreateOrganismeCommand,\n  CreateOrganismeCommandResponse,\n  DeleteInstanceCommand,\n  DeleteRepresentantCommand,\n  LoginCommand,\n  LoginCommandResponse,\n  MoveRepresentantCommand,\n  RegisterCommand,\n  RegisterCommandResponse,\n  UpdateOrganismeNatureJuridiqueCommand,\n  UpdateOrganismePartageRepresentantsCommand,\n  UpdateOrganismeSecteurCommand,\n  UpdateOrganismeTypeStructureCommand\n} from '../domain/commands';\n\nexport class CommandService {\n  public addInstanceCommand = (\n    command: AddInstanceCommand\n  ): Promise<AddInstanceCommandResponse> =>\n    this.command('AddInstanceCommand', command);\n\n  public addLienDeliberationCommand = (\n    command: AddLienDeliberationCommand\n  ): Promise<AddLienDeliberationCommandResponse> =>\n    this.command('AddLienDeliberationCommand', command);\n\n  public addRepresentantCommand = (\n    command: AddRepresentantCommand\n  ): Promise<AddRepresentantCommandResponse> =>\n    this.command('AddRepresentantCommand', command);\n\n  public createDeliberationAndAddLienCommand = (\n    command: CreateDeliberationAndAddLienCommand\n  ): Promise<CreateDeliberationAndAddLienCommandResponse> =>\n    this.command('CreateDeliberationAndAddLienCommand', command);\n\n  public createOrganismeCommand = (\n    command: CreateOrganismeCommand\n  ): Promise<CreateOrganismeCommandResponse> =>\n    this.command('CreateOrganismeCommand', command);\n\n  public deleteInstanceCommand = (\n    command: DeleteInstanceCommand\n  ): Promise<void> => this.command('DeleteInstanceCommand', command);\n\n  public deleteRepresentantCommand = (\n    command: DeleteRepresentantCommand\n  ): Promise<void> => this.command('DeleteRepresentantCommand', command);\n\n  public loginCommand = (\n    command: LoginCommand\n  ): Promise<LoginCommandResponse> => this.command('LoginCommand', command);\n\n  public moveRepresentantCommand = (\n    command: MoveRepresentantCommand\n  ): Promise<MoveRepresentantCommand> =>\n    this.command('MoveRepresentantCommand', command);\n\n  public registerCommand = (\n    command: RegisterCommand\n  ): Promise<RegisterCommandResponse> =>\n    this.command('RegisterCommand', command);\n\n  public updateOrganismeNatureJuridiqueCommand = (\n    command: UpdateOrganismeNatureJuridiqueCommand\n  ): Promise<void> =>\n    this.command('UpdateOrganismeNatureJuridiqueCommand', command);\n\n  public updateOrganismePartageRepresentantsCommand = (\n    command: UpdateOrganismePartageRepresentantsCommand\n  ): Promise<void> =>\n    this.command('UpdateOrganismePartageRepresentantsCommand', command);\n\n  public updateOrganismeSecteurCommand = (\n    command: UpdateOrganismeSecteurCommand\n  ): Promise<void> => this.command('UpdateOrganismeSecteurCommand', command);\n\n  public updateOrganismeTypeStructureCommand = (\n    command: UpdateOrganismeTypeStructureCommand\n  ): Promise<void> =>\n    this.command('UpdateOrganismeTypeStructureCommand', command);\n\n  private command = <R>(commandName: string, command?: object): Promise<R> =>\n    appContext\n      .httpService()\n      .post('/command', {\n        ...command,\n        objectType: commandName\n      })\n      .then(r => r.body);\n}\n","import { Errors } from '../errors';\nimport { getCookie } from '../utils';\n\nconst cookieName = 'XSRF-TOKEN';\n\nexport class CsrfTokenService {\n  public header = 'X-XSRF-TOKEN';\n  public inputName = '_csrf';\n  public token!: string;\n\n  constructor() {\n    this.refreshToken();\n  }\n\n  public refreshToken() {\n    const token = getCookie(cookieName);\n    if (!token) {\n      throw Errors._166ac42d();\n    }\n    this.token = token;\n  }\n}\n","import { appContext } from '../ApplicationContext';\nimport { RequestErrorId } from '../domain/ids';\nimport { Instant } from '../domain/time';\n\ntype RequestType = 'GET' | 'POST';\n\nexport const displayErrorMessage = 'DisplayError';\n\nexport interface HttpResponse {\n  status: number;\n  body?: any;\n}\n\nexport interface RequestError {\n  id?: RequestErrorId;\n  status: number;\n  error: string;\n  message: string;\n  instant: Instant;\n  stackTrace?: any;\n}\n\nexport class HttpService {\n  public credentials: RequestCredentials = 'same-origin';\n\n  public get = (url: string, getParams?: any) =>\n    this.fetchAndDeserialize('GET', url, getParams);\n\n  public post = (url: string, bodyObject?: any) =>\n    this.fetchAndDeserialize('POST', url, null, JSON.stringify(bodyObject));\n\n  public fetch(\n    requestType: RequestType,\n    url: string,\n    getParams?: any,\n    bodyAsString?: string\n  ): Promise<Response> {\n    const params: RequestInit = {\n      method: requestType,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        [appContext.csrfTokenService().header]: appContext.csrfTokenService()\n          .token\n      },\n      credentials: this.credentials\n    };\n    if (bodyAsString) {\n      params.body = bodyAsString;\n    }\n    let finalUrl = url;\n    if (getParams) {\n      finalUrl += '?' + encodeURIComponent(JSON.stringify(getParams));\n    }\n    return fetch(finalUrl, params);\n  }\n\n  private fetchAndDeserialize(\n    requestType: RequestType,\n    url: string,\n    getParams?: any,\n    bodyAsString?: string\n  ): Promise<HttpResponse> {\n    return this.fetch(requestType, url, getParams, bodyAsString).then(\n      (response: Response) => {\n        if (response.ok) {\n          return response.text().then(t => ({\n            status: response.status,\n            body: t !== '' ? JSON.parse(t) : undefined\n          }));\n        } else {\n          return response.text().then(t => {\n            const error: RequestError = JSON.parse(t);\n            if (error.error === displayErrorMessage) {\n              return Promise.reject(displayErrorMessage);\n            }\n            return Promise.reject(error);\n          });\n        }\n      }\n    );\n  }\n}\n","import { toast } from 'react-toastify';\n\nexport type NotificationLevel = 'warning' | 'info';\n\nexport class NotificationService {\n  public notifications = [] as [\n    string,\n    { message: string; level: NotificationLevel }\n  ][];\n\n  public displayNotification = (\n    message: string,\n    level: NotificationLevel = 'info'\n  ) => {\n    // TODO[error]\n    toast(message);\n  };\n}\n","import { appContext } from '../ApplicationContext';\nimport {\n  GetOrganismeQuery,\n  GetOrganismeQueryResponse,\n  IsLoginAlreadyTakenQuery,\n  IsLoginAlreadyTakenQueryResponse,\n  ListOrganismesBySecteurQuery,\n  ListOrganismesBySecteurQueryResponse,\n  ListOrganismesQueryResponse,\n  SearchDeliberationQuery,\n  SearchDeliberationQueryResponse\n} from '../domain/queries';\n\nexport class QueryService {\n  public getOrganismeQuery = (\n    query: GetOrganismeQuery\n  ): Promise<GetOrganismeQueryResponse> =>\n    this.query('GetOrganismeQuery', query);\n\n  public isLoginAlreadyTakenQuery = (\n    query: IsLoginAlreadyTakenQuery\n  ): Promise<IsLoginAlreadyTakenQueryResponse> =>\n    this.query('IsLoginAlreadyTakenQuery', query);\n\n  public listOrganismesBySecteurQuery = (\n    query: ListOrganismesBySecteurQuery\n  ): Promise<ListOrganismesBySecteurQueryResponse> =>\n    this.query('ListOrganismesBySecteurQuery', query);\n\n  public listOrganismesQuery = (): Promise<ListOrganismesQueryResponse> =>\n    this.query('ListOrganismesQuery');\n\n  public searchDeliberationQuery = (\n    query: SearchDeliberationQuery\n  ): Promise<SearchDeliberationQueryResponse> =>\n    this.query('SearchDeliberationQuery', query);\n\n  private query = <R>(queryName: string, query?: object): Promise<R> =>\n    appContext\n      .httpService()\n      .get('/query', {\n        ...query,\n        objectType: queryName\n      })\n      .then(r => r.body);\n}\n","import { ApplicationHistory } from './routing/ApplicationHistory';\nimport { CommandService } from './services/CommandService';\nimport { CsrfTokenService } from './services/CsrfTokenService';\nimport { HttpService } from './services/HttpService';\nimport { NotificationService } from './services/NotificationService';\nimport { QueryService } from './services/QueryService';\n\nclass ApplicationContext {\n  private csrfTokenServiceInstance!: CsrfTokenService;\n  public csrfTokenService = () => {\n    if (!this.csrfTokenServiceInstance) {\n      this.csrfTokenServiceInstance = new CsrfTokenService();\n    }\n    return this.csrfTokenServiceInstance;\n  };\n\n  private httpServiceInstance!: HttpService;\n  public httpService = () => {\n    if (!this.httpServiceInstance) {\n      this.httpServiceInstance = new HttpService();\n    }\n    return this.httpServiceInstance;\n  };\n\n  private notificationServiceInstance!: NotificationService;\n  public notificationService = () => {\n    if (!this.notificationServiceInstance) {\n      this.notificationServiceInstance = new NotificationService();\n    }\n    return this.notificationServiceInstance;\n  };\n\n  private applicationHistoryInstance!: ApplicationHistory;\n  public applicationHistory = () => {\n    if (!this.applicationHistoryInstance) {\n      this.applicationHistoryInstance = new ApplicationHistory();\n    }\n    return this.applicationHistoryInstance;\n  };\n\n  private queryServiceInstance!: QueryService;\n  public queryService = () => {\n    if (!this.queryServiceInstance) {\n      this.queryServiceInstance = new QueryService();\n    }\n    return this.queryServiceInstance;\n  };\n\n  private commandServiceInstance!: CommandService;\n  public commandService = () => {\n    if (!this.commandServiceInstance) {\n      this.commandServiceInstance = new CommandService();\n    }\n    return this.commandServiceInstance;\n  };\n}\n\nexport const appContext = new ApplicationContext();\n","export const dimensions = {\n  screenSmMin: 768\n};\n\nexport const fonts = {\n  // baseSize: 8,\n  font: \"Arial, 'sans-serif'\"\n};\n\nexport const colors = {\n  clearGrey: '#eeeeee',\n  clearGrey2: '#f8f8f8',\n  dragableMoving: 'lightgreen',\n  dragHandlers: '#333333',\n  errorBackground: '#bd4641',\n  errorRed: '#cc0000',\n  grey: '#333333',\n  lightblue: 'lightblue',\n  popupGlasspanel: 'rgba(220, 220, 220, 0.85)',\n  white: '#ffffff'\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { fonts } from './vars';\n\nexport const globalStyles = css`\n  *,\n  *:before,\n  *:after {\n    position: relative;\n    box-sizing: border-box;\n  }\n\n  html,\n  body {\n    margin: 0;\n    // font-size: {fonts.baseSize}px;\n    font-family: ${fonts.font};\n  }\n\n  button {\n    outline: none !important;\n  }\n\n  h1 {\n    font-size: 1.6rem;\n    font-weight: normal;\n  }\n  h2 {\n    font-size: 1.5rem;\n    font-weight: normal;\n  }\n  h3 {\n    font-size: 1.4rem;\n    font-weight: normal;\n  }\n  h4 {\n    font-size: 1.3rem;\n    font-weight: normal;\n    text-align: center;\n  }\n`;\n","import { css } from '@emotion/react';\n\n// https://stackoverflow.com/questions/43186015/css-hide-scroll-bar-but-have-element-scrollable/43186311\nexport const cleanScrollBar = css`\n  // Chrome/Safari/Webkit\n  ::-webkit-scrollbar {\n    width: 0;\n    background: transparent;\n  }\n  // Firefox\n  scrollbar-width: none;\n  // IE 10+\n  -ms-overflow-style: none;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { PropsWithChildren, useEffect, useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport { cleanScrollBar } from '../common-classes';\n\n// [doc] https://usehooks.com/useWindowSize/\nexport const useWindowHeight = () => {\n  const [height, setHeight] = useState(0);\n\n  useEffect(() => {\n    const handleResize = () => setHeight(window.innerHeight);\n\n    window.addEventListener('resize', () => handleResize());\n\n    handleResize();\n\n    return () => window.removeEventListener('resize', handleResize);\n  });\n\n  return height;\n};\n\n// [doc] Dimensionnement du root element est fait en javascript, à cause de Chrome _mobile_, car\n// la window.innerHeight change lorsque la barre d'url s'affiche ou ne cache...\n// Ce qui pose notamment des bugs tordus avec les popups.\n// See https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n// Ont été essayé en css :\n// height: 100%; (point de départ) => bug en bas de popup lorsque barré d'url hidden\n// height: 100vh; => fixe la taille à l'écran sans barre d'url même lorsqu'elle est affichée... comportement à\n// la con avec le scrolling\n// height: calc(100vh - 56px); => même behaviour que height 100%\n// height: calc(100% - 56px); => je sais plus mais caca aussi =]\n// min-height: -webkit-fill-available; => popup complètement coupée en bar hidden\n// cf onetab \"100vh\"\nexport const Root = (props: PropsWithChildren<{}>) => {\n  const height = useWindowHeight();\n  return (\n    <div\n      css={css`\n        position: absolute;\n        width: 100%;\n        height: ${height}px;\n        overflow: hidden;\n      `}\n    >\n      <ToastContainer />\n      <div\n        css={css`\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          overflow-y: scroll;\n          ${cleanScrollBar};\n        `}\n      >\n        {props.children}\n      </div>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { MainContainer } from '../container/MainContainer';\n\nexport const NotFoundView = () => (\n  <MainContainer>\n    <h1>404</h1>\n  </MainContainer>\n);\n","/** @jsxImportSource @emotion/react */\nimport * as React from 'react';\nimport { Route, Router, Switch } from 'react-router';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { appContext } from '../ApplicationContext';\nimport { NotFoundView } from '../view/NotFoundView';\nimport { routes } from './routes';\n\nexport const ApplicationRouter = () => (\n  <Router history={appContext.applicationHistory().browserHistory}>\n    <Switch>\n      {Object.values(routes).map(r => (\n        <Route\n          key={r.path}\n          exact={true}\n          path={r.path}\n          render={(routerProps: RouteComponentProps<any>) => {\n            return React.createElement(r.component, {\n              routeParams: routerProps.match.params\n            });\n          }}\n        />\n      ))}\n      <Route exact={false} component={NotFoundView} />\n    </Switch>\n  </Router>\n);\n","// organize-imports-ignore\n/**\n * [doc] this file exists to control important imports order\n * auto prettier-plugin-organize-imports reordering is blocked by 'organize-imports-ignore'\n * polyfills must be loaded first in case of things done 'synchronously' in files\n */\nimport 'es6-promise/auto';\nimport 'es6-shim';\nimport 'es7-shim';\nimport 'whatwg-fetch';\nimport './application-bootstrap';\n","import { ClientUid } from './domain/client-ids';\nimport { LocalDate } from './domain/time';\nimport {\n  instanciateNominalString,\n  stringifyNominalString\n} from './utils/nominal-class';\n\nexport function assertUnreachable(x: never): never {\n  throw new Error(`Expected unreachable code ! Value : \"${JSON.stringify(x)}\"`);\n}\n\nlet uniqueIdIndex = 0;\nexport const clientUid = () =>\n  instanciateNominalString<ClientUid>('ClientUid_' + uniqueIdIndex++);\n\nexport const getCookie = (cookieName: string) => {\n  const name = cookieName + '=';\n  const ca = document.cookie.split(';');\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) === ' ') c = c.substring(1);\n    if (c.indexOf(name) !== -1) return c.substring(name.length, c.length);\n  }\n  return undefined;\n};\n\nexport const compareByNumber = <T>(l: (o: T) => number) => (o1: T, o2: T) => {\n  if (l(o1) > l(o2)) return 1;\n  else if (l(o1) < l(o2)) return -1;\n  else return 0;\n};\n\nexport const compareByString = <T>(l: (o: T) => string) => (o1: T, o2: T) =>\n  l(o1).localeCompare(l(o2));\n\nexport const compareByLocalDate = <T>(l: (o: T) => LocalDate) => (\n  o1: T,\n  o2: T\n) => stringifyNominalString(l(o1)).localeCompare(stringifyNominalString(l(o2)));\n\nexport const defer = (action: () => void) => setTimeout(action, 0);\n","import { atom, selector } from 'recoil';\nimport { applicationBootstrapData } from '../constants';\nimport {\n  NatureJuridique,\n  Secteur,\n  TypeStructure\n} from '../domain/bootstrap-data';\nimport { Elu } from '../domain/elu';\nimport {\n  EluId,\n  NatureJuridiqueId,\n  SecteurId,\n  TypeStructureId\n} from '../domain/ids';\nimport { compareByString } from '../utils';\nimport { Dict, pairsToDict } from '../utils/nominal-class';\n\nexport const state = {\n  elus: atom<Elu[]>({\n    key: 'elus',\n    default: applicationBootstrapData.elus.sort(compareByString(i => i.nom))\n  }),\n  elusById: selector({\n    key: 'elusById',\n    // TODO wtf typescript, pourquoi le return est nécessaire\n    get: ({ get }): Dict<EluId, Elu> =>\n      pairsToDict(get(state.elus).map(e => [e.id, e]))\n  }),\n  natureJuridiques: atom({\n    key: 'natureJuridiques',\n    default: applicationBootstrapData.categories.natureJuridiques.sort(\n      compareByString(i => i.libelle)\n    )\n  }),\n  natureJuridiquesById: selector({\n    key: 'natureJuridiquesById',\n    get: ({ get }): Dict<NatureJuridiqueId, NatureJuridique> =>\n      pairsToDict(get(state.natureJuridiques).map(n => [n.id, n]))\n  }),\n  organismeCategories: atom({\n    key: 'organismeCategories',\n    default: applicationBootstrapData.categories\n  }),\n  secteurs: atom({\n    key: 'secteurs',\n    default: applicationBootstrapData.categories.secteurs.sort(\n      compareByString(i => i.libelle)\n    )\n  }),\n  secteursById: selector({\n    key: 'secteursById',\n    get: ({ get }): Dict<SecteurId, Secteur> =>\n      pairsToDict(get(state.secteurs).map(s => [s.id, s]))\n  }),\n  typeStructures: atom({\n    key: 'typeStructures',\n    default: applicationBootstrapData.categories.typeStructures.sort(\n      compareByString(i => i.libelle)\n    )\n  }),\n  typeStructuresById: selector({\n    key: 'typeStructuresById',\n    get: ({ get }): Dict<TypeStructureId, TypeStructure> =>\n      pairsToDict(get(state.typeStructures).map(t => [t.id, t]))\n  }),\n  userInfos: atom({\n    key: 'userInfos',\n    default: applicationBootstrapData.userInfos\n  })\n};\n","/** @jsxImportSource @emotion/react */\nimport styled from '@emotion/styled';\nimport * as React from 'react';\nimport { PropsWithChildren } from 'react';\nimport { Link } from 'react-router-dom';\nimport { appContext } from '../ApplicationContext';\nimport { EmotionStyles } from '../interfaces';\nimport { Route } from './routes';\n\ninterface Props {\n  route: Route;\n  forwardCss?: EmotionStyles;\n}\n\nexport const RouteLink = (props: PropsWithChildren<Props>) => {\n  const Styled = props.forwardCss ? styled(Link)(props.forwardCss) : Link;\n  return (\n    <Styled to={appContext.applicationHistory().buildPath(props.route)}>\n      {props.children}\n    </Styled>\n  );\n};\n","import { Global } from '@emotion/react';\nimport { MuiThemeProvider, StylesProvider } from '@material-ui/core';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Router as ReactRouter } from 'react-router-dom';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { RecoilRoot } from 'recoil';\nimport { appContext } from './ApplicationContext';\nimport { SharedHeightContainerContext } from './component/base-component/SharedHeightContainerContext';\nimport { Root } from './container/Root';\nimport { ApplicationRouter } from './routing/ApplicationRouter';\nimport { globalStyles } from './styles/common-styles';\nimport './styles/ReactToastify-additional.css';\n\nglobal.log = (logged: any) => console.log(logged);\n\nconst muiTheme = createMuiTheme({\n  typography: {\n    // fontSize: fonts.baseSize,\n    // htmlFontSize: fonts.baseSize\n  }\n});\nReactDOM.render(\n  <RecoilRoot>\n    <Global styles={[globalStyles]} />\n    <ReactRouter history={appContext.applicationHistory().browserHistory}>\n      <StylesProvider injectFirst>\n        <MuiThemeProvider theme={muiTheme}>\n          <Root>\n            <SharedHeightContainerContext>\n              <ApplicationRouter />\n            </SharedHeightContainerContext>\n          </Root>\n        </MuiThemeProvider>\n      </StylesProvider>\n    </ReactRouter>\n  </RecoilRoot>,\n  document.getElementById('root')\n);\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button } from '@material-ui/core';\nimport * as React from 'react';\nimport { PureComponent } from 'react';\nimport { appContext } from '../ApplicationContext';\n\nconst logoutPath = '/logout';\n\nexport class LogoutForm extends PureComponent {\n  public logoutForm: HTMLFormElement | null = null;\n\n  // [doc] is here to prevent double submission\n  // is NOT state (should not trigger a render)\n  private isLoggingOut = false;\n\n  public logout = () => {\n    if (!this.isLoggingOut) {\n      this.isLoggingOut = true;\n      this.logoutForm!.submit();\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <form\n          ref={c => (this.logoutForm = c)}\n          method=\"post\"\n          action={logoutPath}\n        >\n          <input\n            type=\"hidden\"\n            name={appContext.csrfTokenService().inputName}\n            value={appContext.csrfTokenService().token}\n          />\n        </form>\n        <Button\n          onClick={this.logout}\n          size=\"small\"\n          css={css`\n            top: -4px;\n            height: 24px;\n            background-color: white;\n            font-size: 0.8rem;\n            padding: 0 10px;\n          `}\n        >\n          Se déconnecter\n        </Button>\n      </React.Fragment>\n    );\n  }\n}\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { LogoutForm } from '../form/LogoutForm';\nimport { RouteLink } from '../routing/RouteLink';\nimport { state } from '../state/state';\nimport { colors } from '../styles/vars';\n\nexport const Menu = () => {\n  const [userInfos] = useRecoilState(state.userInfos);\n  return (\n    <div\n      css={css`\n        display: flex;\n        justify-content: space-between;\n        width: 100%;\n        height: 36px;\n        padding: 8px 20px;\n        background: ${colors.grey};\n      `}\n    >\n      <RouteLink\n        forwardCss={css`\n          color: ${colors.white};\n          text-decoration: none;\n          text-transform: uppercase;\n        `}\n        route={{\n          name: 'RootRoute'\n        }}\n      >\n        Orgarif\n      </RouteLink>\n      <div\n        css={css`\n          display: flex;\n        `}\n      >\n        {userInfos && (\n          <div\n            css={css`\n              color: ${colors.white};\n              margin: 0 10px;\n            `}\n          >\n            {userInfos.mail}\n          </div>\n        )}\n        {userInfos && <LogoutForm />}\n        {!userInfos && (\n          <React.Fragment>\n            <RouteLink\n              forwardCss={css`\n                color: ${colors.white};\n                margin: 0 10px;\n              `}\n              route={{\n                name: 'LoginRoute'\n              }}\n            >\n              Identification\n            </RouteLink>\n            <RouteLink\n              forwardCss={css`\n                color: ${colors.white};\n                margin: 0 10px;\n              `}\n              route={{\n                name: 'RegisterRoute'\n              }}\n            >\n              Créer un compte\n            </RouteLink>\n          </React.Fragment>\n        )}\n      </div>\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport * as React from 'react';\nimport { PropsWithChildren } from 'react';\nimport { Menu } from './Menu';\n\nexport const MainContainer = (props: PropsWithChildren<{}>) => (\n  <div\n    css={css`\n      position: absolute;\n      display: flex;\n      height: 100%;\n      width: 100%;\n    `}\n  >\n    <div\n      css={css`\n        flex: 1;\n        overflow: scroll;\n      `}\n    >\n      <Menu />\n      <div\n        css={css`\n          margin: 10px;\n        `}\n      >\n        {props.children}\n      </div>\n    </div>\n  </div>\n);\n","export const Errors = {\n  _db434940: () => Error('db434940'),\n  _198c103e: () => Error('198c103e'),\n  _4b60ab70: () => Error('4b60ab70'),\n  _166ac42d: () => Error('166ac42d'),\n  _6f643a2a: () => Error('6f643a2a'),\n  _82c7652b: () => Error('82c7652b'),\n  _41dcf9d3: () => Error('41dcf9d3'),\n  _ff7e63f5: () => Error('ff7e63f5')\n};\n","import { ApplicationBootstrapData } from './domain/bootstrap-data';\n\nexport const applicationBootstrapData = global.bootstrapData as ApplicationBootstrapData;\n\nexport const SharedConstants = {\n  deliberationSearchLengthLimit: 3\n};\n","export type NominalItem = NominalString<any> | NominalNumber<any>;\n\nexport abstract class NominalString<T extends string> {\n  private _typeGuard!: T;\n}\n\nexport abstract class NominalNumber<T extends string> {\n  private _typeGuard!: T;\n}\n\nexport const stringifyNominalString = (value: NominalString<any> | string) =>\n  value as string;\n\nexport const numberifyNominalNumber = (value: NominalNumber<any>) =>\n  (value as unknown) as number;\n\nexport const instanciateNominalString = <T extends NominalString<any>>(\n  value: string\n) => (value as unknown) as T;\n\nexport const instanciateNominalNumber = <T extends NominalNumber<any>>(\n  value: number\n) => (value as unknown) as T;\n\nexport class Dict<K extends NominalItem, T> {\n  private _typeGuardKey!: K;\n  private _typeGuardValue!: T;\n}\n\nexport const dict = <K extends NominalItem, T>() => {\n  return {} as Dict<K, T>;\n};\n\nexport const get = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  key: K\n): T | undefined =>\n  // @ts-ignore\n  dict[key];\n\nexport const getValue = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  key: K\n): T => {\n  const r = get(dict, key);\n  if (!r) {\n    throw new Error(`Could not find item ${key}`);\n  }\n  return r;\n};\n\nexport const set = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  key: K,\n  value: T\n): Dict<K, T> => {\n  const newDict = { ...dict } as Dict<K, T>;\n  // @ts-ignore\n  newDict[key] = value;\n  return newDict;\n};\n\nexport const setMutable = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  key: K,\n  value: T\n) => {\n  // @ts-ignore\n  dict[key] = value;\n};\n\nexport const dictKeys = <K extends NominalItem, T>(dict: Dict<K, T>) =>\n  (Object.keys(dict) as unknown) as K[];\n\nexport const dictValues = <K extends NominalItem, T>(dict: Dict<K, T>) =>\n  Object.values(dict) as T[];\n\nexport const dictEntries = <K extends NominalItem, T>(dict: Dict<K, T>) =>\n  (Object.entries(dict) as unknown) as [K, T][];\n\n// FIXME remove usage pour un deleteItem immuable\nexport const deleteItemOld = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  key: K\n) => {\n  // @ts-ignore\n  delete dict[key];\n};\n\nexport const deleteFromDict = <K extends NominalItem, T>(\n  dict: Dict<K, T>,\n  ...keys: K[]\n): Dict<K, T> => {\n  const newDict = { ...dict } as Dict<K, T>;\n  keys.forEach(k => {\n    // @ts-ignore\n    delete newDict[k];\n  });\n  return newDict;\n};\n\nexport const pairsToDict = <K extends NominalItem, T>(pairs: [K, T][]) => {\n  const d = dict<K, T>();\n  pairs.forEach(pair => {\n    // @ts-ignore\n    d[pair[0]] = pair[1];\n  });\n  return d;\n};\n\nexport const mergeDicts = <K extends NominalItem, T>(\n  ...dicts: Dict<K, T>[]\n) => {\n  const d = dict<K, T>();\n  dicts.forEach(d => {\n    dictEntries(d).forEach(p => {\n      setMutable(d, p[0], p[1]);\n    });\n  });\n  return d;\n};\n\nexport const associateBy = <K extends NominalItem, T>(\n  a: T[],\n  key: (i: T) => K\n): Dict<K, T> => {\n  const d = dict<K, T>();\n  a.forEach(i => setMutable(d, key(i), i));\n  return d;\n};\n\nexport const groupBy = <K extends NominalItem, T>(\n  a: T[],\n  key: (i: T) => K\n): Dict<K, T[]> => {\n  const map = dict<K, T[]>();\n  a.forEach(item => {\n    const k = key(item);\n    const existing = get(map, k);\n    const list = existing ? existing : [];\n    if (!existing) {\n      setMutable(map, k, list);\n    }\n    list.push(item);\n  });\n  return map;\n};\n"],"sourceRoot":""}